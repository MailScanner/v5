#!/usr/bin/env bash

# MailScanner perl module checker
#
# This script will check for any missing perl modules.
#
# MailScanner Team <https://mailscanner.info>
# 25 Feb 2023

# check for perldoc
if [ ! -x /usr/bin/perldoc ]; then
	clear
	echo;
	echo "The perldoc command cannot be found. I need this program to check your";
	echo "modules. Install it or edit this script to point to the correct location.";
	echo;
	exit 1
else
	PERLDOC='/usr/bin/perldoc';
fi

# the array of perl modules needed

# MailScanner (based on code dependencies and run checks)
ARMOD=();
ARMOD+=('AnyDBM_File');
ARMOD+=('Archive::Zip');
ARMOD+=('Carp');
ARMOD+=('Compress::Raw::Zlib'); 
ARMOD+=('Compress::Zlib');
ARMOD+=('Cwd');
ARMOD+=('Data::Dumper');
ARMOD+=('DateTime');
ARMOD+=('DBI');
ARMOD+=('Digest::MD5');
ARMOD+=('DirHandle');
ARMOD+=('Encode');
ARMOD+=('Env');
ARMOD+=('Fcntl');
ARMOD+=('File::Basename');
ARMOD+=('File::Copy');
ARMOD+=('FileHandle');
ARMOD+=('File::Path');
ARMOD+=('Filesys::Df');
ARMOD+=('File::Temp');
ARMOD+=('Getopt::Long');
ARMOD+=('HTML::Entities');
ARMOD+=('HTML::Parser');
ARMOD+=('HTML::TokeParser');
ARMOD+=('IO::File');
ARMOD+=('IO::Handle');
ARMOD+=('IO::Pipe');
ARMOD+=('IO::Socket::INET');
ARMOD+=('IO::Socket::UNIX');
ARMOD+=('IO::Stringy');
ARMOD+=('IPC::Open2');
ARMOD+=('LWP::UserAgent');
ARMOD+=('MIME::Decoder');
ARMOD+=('MIME::Decoder::UU');
ARMOD+=('MIME::Head');
ARMOD+=('MIME::Parser');
ARMOD+=('MIME::WordDecoder');
ARMOD+=('Net::CIDR');
ARMOD+=('Net::DNS');
ARMOD+=('Net::DNS::Resolver::Programmable');
ARMOD+=('Net::Domain');
ARMOD+=('OLE::Storage_Lite');
ARMOD+=('POSIX');
ARMOD+=('Sendmail::PMilter');
ARMOD+=('Socket');
ARMOD+=('strict');
ARMOD+=('Sys::Hostname::Long');
ARMOD+=('Sys::SigAction');
ARMOD+=('Sys::Syslog');
ARMOD+=('Time::HiRes');
ARMOD+=('Time::Local');
ARMOD+=('Time::localtime');

# Various mailscanner module dependencies
ARMOD+=('Algorithm::Diff');
ARMOD+=('B::Hooks::EndOfScope');
ARMOD+=('Capture::Tiny');
ARMOD+=('Class::Data::Inheritable');
ARMOD+=('Class::Inspector');
ARMOD+=('Class::Method::Modifiers');
ARMOD+=('Class::Singleton');
ARMOD+=('Class::Tiny');
ARMOD+=('Clone'); 
ARMOD+=('Compress::Raw::Bzip2'); 
ARMOD+=('Convert::BinHex');
ARMOD+=('DateTime::Locale');
ARMOD+=('DateTime::TimeZone');
ARMOD+=('Devel::StackTrace');
ARMOD+=('Digest::HMAC');
ARMOD+=('Dist::CheckConflicts');
ARMOD+=('Encode::Locale');
ARMOD+=('Eval::Closure');
ARMOD+=('Exception::Class');
ARMOD+=('File::Copy::Recursive');
ARMOD+=('File::Listing');
ARMOD+=('File::ShareDir');
ARMOD+=('File::ShareDir::Install');
ARMOD+=('HTML::Tagset');
ARMOD+=('HTTP::Cookies');
ARMOD+=('HTTP::Daemon');
ARMOD+=('HTTP::Date');
ARMOD+=('HTTP::Message');
ARMOD+=('HTTP::Negotiate');
ARMOD+=('Importer');
ARMOD+=('IO');
ARMOD+=('IO::HTML');
ARMOD+=('List::MoreUtils');
ARMOD+=('LWP::MediaTypes');
ARMOD+=('MailTools');
ARMOD+=('MIME::Tools');
ARMOD+=('Module::Build');
ARMOD+=('Module::Implementation');
ARMOD+=('Module::Pluggable');
ARMOD+=('Module::Runtime');
ARMOD+=('MRO::Compat');
ARMOD+=('namespace::autoclean');
ARMOD+=('namespace::clean');
ARMOD+=('Net::HTTP');
ARMOD+=('Net::LibIDN2');
ARMOD+=('Package::Stash');
ARMOD+=('Package::Stash::XS');
ARMOD+=('Params::Util');
ARMOD+=('Path::Tiny');
ARMOD+=('Perl::Tidy');
ARMOD+=('Role::Tiny');
ARMOD+=('Scope::Guard');
ARMOD+=('Sub::Exporter::Progressive');
ARMOD+=('Sub::Identify');
ARMOD+=('Sub::Info');
ARMOD+=('Sub::Quote');
ARMOD+=('Sub::Uplevel');
ARMOD+=('Term::Table');
ARMOD+=('Test2::Suite');
ARMOD+=('Test::Deep');
ARMOD+=('Test::Exception');
ARMOD+=('Test::FailWarnings');
ARMOD+=('Test::Fatal');
ARMOD+=('Test::File::ShareDir');
ARMOD+=('Test::LeakTrace');
ARMOD+=('Test::Requires');
ARMOD+=('Test::Simple');
ARMOD+=('Test::Warnings');
ARMOD+=('Text::Diff');
ARMOD+=('Try::Tiny');
ARMOD+=('URI');
ARMOD+=('WWW::RobotRules');

# SpamAssassin (4.0) dependencies
ARMOD+=('Alien::Build::Plugin::Download::GitLab');
ARMOD+=('Alien::Build');
ARMOD+=('Alien::Libxml2');
ARMOD+=('Authen::SASL');
ARMOD+=('B::Keywords');
ARMOD+=('BSD::Resource');
ARMOD+=('Config::Tiny');
ARMOD+=('Crypt::OpenSSL::Random');
ARMOD+=('Crypt::OpenSSL::RSA');
ARMOD+=('Data::Dumper::Concise');
ARMOD+=('Data::IEEE754');
ARMOD+=('Data::OptList');
ARMOD+=('Data::Printer');
ARMOD+=('Data::Validate::IP');
ARMOD+=('DBD::SQLite');
ARMOD+=('DBIx::Simple');
ARMOD+=('Devel::Cycle');
ARMOD+=('Digest::SHA1');
ARMOD+=('Email::Abstract');
ARMOD+=('Email::Address::XS');
ARMOD+=('Email::Date::Format');
ARMOD+=('Email::MessageID');
ARMOD+=('Email::MIME::ContentType');
ARMOD+=('Email::MIME::Encodings');
ARMOD+=('Email::MIME');
ARMOD+=('Email::Sender');
ARMOD+=('Email::Simple');
ARMOD+=('Encode::Detect');
ARMOD+=('FFI::CheckLib');
ARMOD+=('File::chdir');
ARMOD+=('File::Which');
ARMOD+=('Geo::IP');
ARMOD+=('Geography::Countries');
ARMOD+=('IO::Socket::INET6');
ARMOD+=('IO::Socket::SSL');
ARMOD+=('IO::String');
ARMOD+=('IP::Country::DB_File');
ARMOD+=('IP::Country');
ARMOD+=('List::AllUtils');
ARMOD+=('List::SomeUtils::XS');
ARMOD+=('List::SomeUtils');
ARMOD+=('List::UtilsBy');
ARMOD+=('Mail::DKIM');
ARMOD+=('Mail::DMARC');
ARMOD+=('Mail::SPF');
ARMOD+=('Math::Int64');
ARMOD+=('MaxMind::DB::Common');
ARMOD+=('MaxMind::DB::Reader::XS');
ARMOD+=('MaxMind::DB::Reader');
ARMOD+=('MIME::Types');
ARMOD+=('Moo');
ARMOD+=('MooX::StrictConstructor');
ARMOD+=('MooX::Types::MooseLike');
ARMOD+=('Mozilla::CA');
ARMOD+=('Net::CIDR::Lite');
ARMOD+=('Net::IDN::Encode');
ARMOD+=('Net::IMAP::Simple');
ARMOD+=('Net::IP');
ARMOD+=('Net::LibIDN');
ARMOD+=('Net::Patricia');
ARMOD+=('Net::SMTPS');
ARMOD+=('Net::SSLeay');
ARMOD+=('NetAddr::IP');
ARMOD+=('Parse::RecDescent');
ARMOD+=('Path::Class');
ARMOD+=('Perl::Critic::Policy::Perlsecret');
ARMOD+=('Perl::Critic');
ARMOD+=('Pod::Parser');
ARMOD+=('Pod::Spell');
ARMOD+=('PPI');
ARMOD+=('PPIx::Regexp');
ARMOD+=('PPIx::Utilities');   
ARMOD+=('Readonly::XS');
ARMOD+=('Readonly');
ARMOD+=('Regexp::Common');
ARMOD+=('Socket6');
ARMOD+=('strictures');
ARMOD+=('String::Format');
ARMOD+=('Sub::Exporter');
ARMOD+=('Sub::Install');
ARMOD+=('Task::Weaken');
ARMOD+=('Test::Output');
ARMOD+=('Test::Pod');
ARMOD+=('Test::Regexp');
ARMOD+=('Throwable');
ARMOD+=('XML::LibXML');
ARMOD+=('YAML');

# More modules
ARMOD+=('Archive::Tar');
ARMOD+=('autodie');
ARMOD+=('bignum');
ARMOD+=('Clone::PP');
ARMOD+=('Convert::TNEF');
ARMOD+=('CPAN');
ARMOD+=('Data::Dump');
ARMOD+=('Date::Parse');
ARMOD+=('DB_File');
ARMOD+=('DBD::SQLite');
ARMOD+=('DBI');
ARMOD+=('Digest');
ARMOD+=('Error');
ARMOD+=('ExtUtils::CBuilder');
ARMOD+=('ExtUtils::MakeMaker');
ARMOD+=('ExtUtils::ParseXS');
ARMOD+=('File::HomeDir');
ARMOD+=('File::Spec');
ARMOD+=('Inline::C');
ARMOD+=('Inline');
ARMOD+=('IO::Compress::Bzip2');
ARMOD+=('IO::Wrap');
ARMOD+=('IO::Zlib');
ARMOD+=('JSON::MaybeXS');
ARMOD+=('Mail::Field');
ARMOD+=('Mail::Header');
ARMOD+=('Mail::IMAPClient');
ARMOD+=('Mail::Internet');
ARMOD+=('Mail::SPF::Query');
ARMOD+=('Math::BigInt');
ARMOD+=('Math::BigRat');
ARMOD+=('Math::Int128');
ARMOD+=('MaxMind::DB::Metadata');
ARMOD+=('MIME::Base64');
ARMOD+=('MIME::QuotedPrint');
ARMOD+=('Net::DNS::Nameserver');
ARMOD+=('Net::LDAP');
ARMOD+=('Net::SSLeay');
ARMOD+=('Net::Works::Network');
ARMOD+=('Parse::RecDescent');
ARMOD+=('Perl::Critic::Policy::TestingAndDebugging::ProhibitNoStrict');
ARMOD+=('Perl::Critic::Policy');
ARMOD+=('Pod::Escapes');
ARMOD+=('Pod::Simple');
ARMOD+=('Scalar::Util');
ARMOD+=('Sort::Naturally');
ARMOD+=('Storable');
ARMOD+=('String::Format');
ARMOD+=('Test::Harness');
ARMOD+=('Test::Manifest');
ARMOD+=('Test::Output');
ARMOD+=('Test::Perl::Critic');
ARMOD+=('Test::Tester');
ARMOD+=('Text::Balanced');
ARMOD+=('version');
ARMOD+=('XML::NamespaceSupport');
ARMOD+=('XML::SAX::Base');
ARMOD+=('XML::SAX');

# additional spamassassin plugins				
ARMOD+=('Mail::SpamAssassin::Plugin::Rule2XSBody');		
ARMOD+=('Mail::SpamAssassin::Plugin::DCC');				
ARMOD+=('Mail::SpamAssassin::Plugin::Pyzor');
ARMOD+=('Mail::SpamAssassin');

for i in "${ARMOD[@]}"
do
	$PERLDOC -l $i >/dev/null 2>&1
	if [ $? != 0 ]; then
		echo "WARNING: $i => Missing";
	else
		echo "$i => OK";
	fi
done

# for i in "${ARMOD2[@]}"
# do
# 	$PERLDOC -l $i >/dev/null 2>&1
# 	if [ $? != 0 ]; then
# 		echo "OPTIONAL: $i => Missing";
# 	else
# 		echo "$i => OK";
# 	fi
# done
