#!/usr/bin/env bash
#
# MailScanner configuration script for Debian based systems
# 
# This script installs the required software for
# MailScanner via apt-get and CPAN based on user input.  
#
#
# Updated: 17 Feb 2023
# MailScanner Team <https://www.mailscanner.info>
clear

# check for missing path to /usr/local/bin
if [[ !($PATH =~ /\/usr\/local\/bin/) ]]; then
  export PATH="$PATH:/usr/local/bin"
fi


# unattended install: command line parameter parsing
parsedCommands=0;
while [ $# -gt 0 ]; do
    case "$1" in
        --update)
            # Select defaults and move forward
            arg_MTA="none";
            arg_installClamav=0;
            arg_installCPAN=1;
            arg_installUnrar=0;
            arg_ramdiskSize=0;
            arg_update=1;
            ((parsedCommands++));
        ;;

        --MTA=*)
            case ${1#*=} in
            "sendmail")  arg_MTA="sendmail"; ((parsedCommands++));;
            "postfix")   arg_MTA="postfix"; ((parsedCommands++));;
            "exim")      arg_MTA="exim4-base"; ((parsedCommands++));;
            "none")      arg_MTA=; ((parsedCommands++));;
            *)
                printf "Error: Invalid value for MTA: select one of 'sendmail', 'postfix', 'exim' or 'none'.\n"
                exit 1
            esac
        ;;

        --installClamav=*)
            if [[ ${1#*=} =~ ^([yY])$ ]]; then
                arg_installClamav=1;
                ((parsedCommands++));
            elif [[ ${1#*=} =~ ^([nN])$ ]]; then
                arg_installClamav=0;
                ((parsedCommands++));
            else
                printf "Error: Invalid value for installClamav: only Y or N values are accepted.\n"
                exit 1
            fi
        ;;

        --installCPAN=*)
            if [[ ${1#*=} =~ ^([yY])$ ]]; then
                arg_installCPAN=1;
                ((parsedCommands++));
            elif [[ ${1#*=} =~ ^([nN])$ ]]; then
                arg_installCPAN=0;
                ((parsedCommands++));
            else
                printf "Error: Invalid value for installCPAN: only Y or N values are accepted.\n"
                exit 1
            fi
        ;;

        --installUnrar=*)
            if [[ ${1#*=} =~ ^([yY])$ ]]; then
                arg_installUnrar=1;
                ((parsedCommands++));
            elif [[ ${1#*=} =~ ^([nN])$ ]]; then
                arg_installUnrar=0;
                ((parsedCommands++));
            else
                printf "Error: Invalid value for installUnrar: only Y or N values are accepted.\n"
                exit 1
            fi
        ;;

        --ramdiskSize=*)
            if [[ ${1#*=} =~ ^-?[0-9]+$ ]]; then
                arg_ramdiskSize="${1#*=}";
                ((parsedCommands++));
            else
                printf "Error: Invalid value for ramdiskSize: only integer values are accepted.\n"
                exit 1
            fi
        ;;

        --help)
            printf "MailScanner Installation for Debian Based Systems\n\n"
            printf "Usage: %s [--update] [--MTA=sendmail|postfix|exim|none] [--installClamav=Y|N] [--installCPAN=Y|N] [--ignoreDeps=Y|N] [--ramdiskSize=value]\n\n" "$0"
            printf -- "--update              Perform an update on an existing install using the following options (can be overridden):\n"
            printf    "                        --MTA=none        (assumed already installed)\n"
            printf    "                        --installClamav=N (assumed already installed)\n"
            printf    "                        --installCPAN=Y\n"
            printf    "                        --ignoreDeps=N\n"
            printf    "                        --ramdiskSize=0   (assumed already configured)\n\n"
            printf -- "--MTA=value           Select the Mail Transfer Agent (MTA) to be installed           (sendmail|postfix|exim|none)\n"
            printf    "                      Recommended: sendmail\n\n"
            printf -- "--installClamav=Y|N   Install or update ClamAV during installation                   (Y or N)\n"
            printf    "                      Recommended: Y (yes)\n\n"
            printf -- "--installCPAN=Y|N     Install missing perl modules via CPAN                          (Y or N)\n"
            printf    "                      Recommended: Y (yes)\n\n"
            printf -- "--installUnrar=Y|N    Install unrar via dpkg                                         (Y or N)\n"
            printf    "                      Recommended: Y (yes)\n\n"
            printf -- "--ramdiskSize=value   Create a RAMDISK for incoming spool directory                  (integer value or 0 for none)\n"
            printf    "                      Suggestions:\n";
            printf    "                      None         0\n";
            printf    "                      Small        256\n";
            printf    "                      Medium       512\n";
            printf    "                      Large        1024 or 2048\n";
            printf    "                      Enterprise   4096 or 8192\n";
            exit 0
        ;;

        *)
            printf "Error: Invalid argument \"%s\".\n\n" "$1"
            printf "See help with %s --help\n" "$0"
            exit 1
    esac
    shift
done

# where i started for DEB install
THISCURRPMDIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

# Function used to Wait for n seconds
timewait () {
    DELAY=$1
    sleep ${DELAY}
}

# Check for root user
if [ $(whoami) != "root" ]; then
    clear
    echo;
    echo "Installer must be run as root. Aborting. Use 'su -' to switch to the root environment."; echo;
    exit 192
fi

# bail if apt-get is not installed
if [ ! -x '/usr/bin/apt-get' ]; then
    clear
    echo;
    echo "apt-get package manager is not installed. You must install this before starting";
    echo "the MailScanner installation process. Installation aborted."; echo;
    exit 192
else
    APTGET='/usr/bin/apt-get';
fi

# user info screen before the install process starts
echo "MailScanner Installation for Debian Based Systems"; echo; echo;
echo "This will INSTALL or UPGRADE the required software for MailScanner on Debian based systems";
echo "via the Apt package manager. Supported distributions are Debian and associated variants";
echo "such as Ubuntu. Internet connectivity is required for this installation script to execute."; 
echo;
echo "WARNING - Make a backup of any custom configuration files if upgrading - WARNING";
echo;
echo "You may press CTRL + C at any time to abort the installation. Note that you may see";
echo "some errors during the perl module installation. You may safely ignore errors regarding";
echo "failed tests for optional packages."; echo;
if [ "$parsedCommands" -eq 0 ]; then
    echo "When you are ready to continue, press return ... ";
    read foobar
fi

# install or upgrade
if [ -f '/etc/MailScanner/MailScanner.conf' ]; then
    CONFFILES="--force-confold"
else
    # new install
    CONFFILES=
fi

# ask if the user wants an mta installed
clear
echo;
echo "Do you want to install a Mail Transfer Agent (MTA)?"; echo;
echo "I can install an MTA via the apt package manager to save you the trouble of having to do";
echo "this later. If you plan on using an MTA that is not listed below, you will have install ";
echo "it manually yourself if you have not already done so.";
echo;
echo "1 - sendmail";
echo "2 - postfix";
echo "3 - exim";
echo "N - Do not install";
echo;
echo "Recommended: 1 (sendmail)"; echo;
if [ -z "${arg_MTA+x}" ]; then
    read -r -p "Install an MTA? [1] : " response
    if [[ $response =~ ^([nN][oO])$ ]]; then
        # do not install
        MTAOPTION=
    elif [ -z $response ]; then
        # sendmail default
        MTAOPTION="sendmail sendmail-bin";
    elif [ $response -eq 1 ]; then
        # sendmail
        MTAOPTION="sendmail sendmail-bin";
    elif [ $response -eq 2 ]; then
        # postfix
        MTAOPTION="postfix";
    elif [ $response -eq 3 ]; then
        # exim
        MTAOPTION="exim4-base";
    else
        MTAOPTION=
    fi    
else
    MTAOPTION=${arg_MTA};
fi

# clamav
clear
echo;
echo "Do you want to install or update ClamAV during this installation process?"; echo;
echo "This package is recommended unless you plan on using a different virus scanner.";
echo "Note that you may use more than one virus scanner at once with MailScanner.";
echo;
echo "Even if you already have ClamAV installed you should select this option so I";
echo "will know to check the clamav-wrapper and make corrections if required.";
echo;
echo "Recommended: Y (yes)"; echo;
if [ -z "${arg_installClamav+x}" ]; then
    read -r -p "Install or update ClamAV? [n/Y] : " response

    if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
        # user wants clam av installed
        # some of these options may result in a 'no package available' on
        # some distributions, but that is ok
        CAV=1
        CAVOPTION="clamav-daemon libclamav-client-perl libclamav-dev";
    elif [ -z $response ]; then
        CAV=1
        CAVOPTION="clamav-daemon libclamav-client-perl libclamav-dev";
    else
        # user does not want clam av
        CAV=0
        CAVOPTION=
    fi
else
    CAV=${arg_installClamav}
    CAVOPTION=
    if [ ${CAV} -eq 1 ]; then
        CAVOPTION="clamav-daemon libclamav-client-perl libclamav-dev";
    fi
fi

# ask if the user wants missing modules installed via CPAN
clear
echo;
echo "Do you want to install missing perl modules via CPAN?"; echo;
echo "I will attempt to install Perl modules via apt, but some may not be unavailable during the";
echo "installation process. Missing modules will likely cause MailScanner to malfunction.";
echo;
echo "Recommended: Y (yes)"; echo;
if [ -z "${arg_installCPAN+x}" ]; then
    read -r -p "Install missing Perl modules via CPAN? [n/Y] : " response

    if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
        # user wants to use CPAN for missing modules
        CPANOPTION=1

        # ignore dependency issue since the user elected to
        # use CPAN to remediate the modules
        NODEPS='--force-depends';
    elif [ -z $response ]; then
        # user wants to use CPAN for missing modules
        CPANOPTION=1

        # ignore dependency issue since the user elected to
        # use CPAN to remediate the modules
        NODEPS='--force-depends';
    else
        # user does not want to use CPAN
        CPANOPTION=0
    fi
else
    CPANOPTION=${arg_installCPAN}
    if [ $CPANOPTION -eq 1 ]; then
        NODEPS='--force-depends';
    fi
fi

# ask if the user wants to install unrar by RPM if missing
clear
echo;
echo "Do you want to install unrar via dpkg if missing?"; echo;
echo "I will attempt to install unrar via the apt Package Manager, but if not found I can ";
echo "install this from an deb provided by MailScanner Community Project. unrar allows";
echo "MailScanner to handle archives compressed with rar.";
echo;
echo "Recommended: Y (yes)"; echo;
if [ -z "${arg_installUnrar+x}" ]; then
    read -r -p "Install missing unrar via RPM? [n/Y] : " response
    if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
        # user wants to use RPM for missing unrar
        UNRAROPTION=1
    elif [ -z $response ]; then 
        # user wants to use RPM for missing unrar
        UNRAROPTION=1
    else
        # user does not want to use RPM
        UNRAROPTION=0
    fi
else
    UNRAROPTION=${arg_installUnrar}
fi

# ask if the user wants to add a ramdisk
clear
echo;
echo "Do you want to create a RAMDISK?"; echo;
echo "This will create a mount in /etc/fstab that attaches the processing"; 
echo "directory /var/spool/MailScanner/incoming to a RAMDISK, which greatly"; 
echo "increases processing speed at the cost of the reservation of some of";
echo "the system RAM. The size depends on the number of MailScanner children,";
echo "the number of messages per batch, and incoming email volume."
echo;
echo "Specify a size in MB or leave blank for none.";
echo;
echo "Suggestions:";
echo "		None		0";
echo "		Small		256";
echo "		Medium		512";
echo " 		Large 		1024 or 2048";
echo " 		Enterprise	4096 or 8192";
echo;
echo "Example: 1024"; echo;
if [ -z "${arg_ramdiskSize+x}" ]; then
    read -r -p "Specify a RAMDISK size? [0] : " RAMDISKSIZE

    if [[ $RAMDISKSIZE =~ ^[0-9]+$ ]]; then
        if [ $RAMDISKSIZE -ne 0 ]; then
            # user wants ramdisk
            RAMDISK=1
        else
            RAMDISK=0
        fi
    else
        # no ramdisk
        RAMDISK=0
    fi
else
    if [ ${arg_ramdiskSize} -eq 0 ]; then
        # no ramdisk
        RAMDISK=0;
    else
        RAMDISK=1;
        RAMDISKSIZE=${arg_ramdiskSize};
    fi
fi

# base system packages
BASEPACKAGES=();
BASEPACKAGES+=('perl-doc');                    BASEPACKAGES+=('re2c');              BASEPACKAGES+=('curl');
BASEPACKAGES+=('wget');                        BASEPACKAGES+=('tar');               BASEPACKAGES+=('binutils');                        
BASEPACKAGES+=('unrar');                       BASEPACKAGES+=('perl-modules');      BASEPACKAGES+=('gcc');                            
BASEPACKAGES+=('make');                        BASEPACKAGES+=('patch');             BASEPACKAGES+=('libc6-dev');
BASEPACKAGES+=('antiword');                    BASEPACKAGES+=('pyzor');             BASEPACKAGES+=('razor');                                        
BASEPACKAGES+=('tnef');                        BASEPACKAGES+=('gzip');              BASEPACKAGES+=('unzip');
BASEPACKAGES+=('openssl');                     BASEPACKAGES+=('perl');              BASEPACKAGES+=('p7zip-full');                    
BASEPACKAGES+=('arj');                         BASEPACKAGES+=('lhasa');             BASEPACKAGES+=('bzip2');  
BASEPACKAGES+=('cabextract');                  BASEPACKAGES+=('cpio');              BASEPACKAGES+=('file');  
BASEPACKAGES+=('gzip');                        BASEPACKAGES+=('nomarch');           BASEPACKAGES+=('pax');  
BASEPACKAGES+=('rar');                         BASEPACKAGES+=('unrar');             BASEPACKAGES+=('unzip');  
BASEPACKAGES+=('zip');                         BASEPACKAGES+=('zoo');               BASEPACKAGES+=('libdb-dev');                    
BASEPACKAGES+=('cpanminus');                   BASEPACKAGES+=('libmaxminddb-dev');  BASEPACKAGES+=('sudo');
BASEPACKAGES+=('libidn2-dev');

# Look for perl modules that may exist in repositories, missing/non-existant packages will be skipped
EXTRAPACKAGES=();
EXTRAPACKAGES+=('libarchive-tar-perl');         EXTRAPACKAGES+=('libarchive-zip-perl');         EXTRAPACKAGES+=('libbignum-perl');
EXTRAPACKAGES+=('libcarp-perl');                EXTRAPACKAGES+=('libcompress-zlib-perl');       EXTRAPACKAGES+=('libcompress-raw-zlib-perl');
EXTRAPACKAGES+=('libconvert-binhex-perl');      EXTRAPACKAGES+=('libconvert-tnef-perl');        EXTRAPACKAGES+=('libdata-dumper-perl');
EXTRAPACKAGES+=('libdata-perse-perl');          EXTRAPACKAGES+=('libdbd-sqlite3-perl');         EXTRAPACKAGES+=('libdbi-perl');
EXTRAPACKAGES+=('libdigest-hmac-perl');         EXTRAPACKAGES+=('libdigest-md5-perl');          EXTRAPACKAGES+=('libdigest-sha1-perl');
EXTRAPACKAGES+=('libdirhandle-perl');           EXTRAPACKAGES+=('libextutils-makemaker-perl');  EXTRAPACKAGES+=('libfcntl-perl');
EXTRAPACKAGES+=('libfile-basename-perl');       EXTRAPACKAGES+=('libfile-copy-perl');           EXTRAPACKAGES+=('libfile-path-perl');
EXTRAPACKAGES+=('libfile-spec-perl');           EXTRAPACKAGES+=('libfile-temp-perl');           EXTRAPACKAGES+=('libfilehandle-perl');
EXTRAPACKAGES+=('libfilesys-df-perl');          EXTRAPACKAGES+=('libgetopt-long-perl');         EXTRAPACKAGES+=('libinline-c-perl');
EXTRAPACKAGES+=('libio-perl');                  EXTRAPACKAGES+=('libio-file-perl');             EXTRAPACKAGES+=('libio-pipe-perl');
EXTRAPACKAGES+=('libio-stringy-perl');          EXTRAPACKAGES+=('libhtml-entities-perl');       EXTRAPACKAGES+=('libhtml-parser-perl');
EXTRAPACKAGES+=('libhtml-tagset-perl');         EXTRAPACKAGES+=('libhtml-tokeparser-perl');     EXTRAPACKAGES+=('libmail-field-perl');
EXTRAPACKAGES+=('libmail-header-perl');         EXTRAPACKAGES+=('libmail-imapclient-perl');     EXTRAPACKAGES+=('libmail-internet-perl');
EXTRAPACKAGES+=('libmath-bigint-perl');         EXTRAPACKAGES+=('libmath-bigrat-perl');         EXTRAPACKAGES+=('libmime-base64-perl');
EXTRAPACKAGES+=('libmime-decoder-perl');        EXTRAPACKAGES+=('libmime-decorder-uu-perl');    EXTRAPACKAGES+=('libmime-head-perl');
EXTRAPACKAGES+=('libmime-parser-perl');         EXTRAPACKAGES+=('libmime-quotedprint-perl');    EXTRAPACKAGES+=('libmime-tools-perl');
EXTRAPACKAGES+=('libmime-worddecoder-perl');    EXTRAPACKAGES+=('libnet-cidr-perl');            EXTRAPACKAGES+=('libnet-dns-perl');
EXTRAPACKAGES+=('libnet-ip-perl');              EXTRAPACKAGES+=('libole-storage-lite-perl');    EXTRAPACKAGES+=('libpod-escapes-perl');
EXTRAPACKAGES+=('libpod-simple-perl');          EXTRAPACKAGES+=('libposix-perl');               EXTRAPACKAGES+=('libscalar-util-perl');
EXTRAPACKAGES+=('libsocket-perl');              EXTRAPACKAGES+=('libstorable-perl');            EXTRAPACKAGES+=('libtest-harness-perl');
EXTRAPACKAGES+=('libtest-pod-perl');            EXTRAPACKAGES+=('libtest-simple-perl');         EXTRAPACKAGES+=('libtime-hires-perl');
EXTRAPACKAGES+=('libtime-localtime-perl');      EXTRAPACKAGES+=('libsys-hostname-long-perl');   EXTRAPACKAGES+=('libsys-sigaction-perl');
EXTRAPACKAGES+=('libsys-syslog-perl');          EXTRAPACKAGES+=('libenv-perl');                 EXTRAPACKAGES+=('libtest-fatal-perl');
EXTRAPACKAGES+=('libdata-dump-perl');           EXTRAPACKAGES+=('libdb-file-perl');             EXTRAPACKAGES+=('libnamespace-autoclean-perl');
EXTRAPACKAGES+=('libmailtools-perl');           EXTRAPACKAGES+=('libdigest-perl');              EXTRAPACKAGES+=('libencode-detect-perl');
EXTRAPACKAGES+=('liberror-perl');               EXTRAPACKAGES+=('libextutils-cbuilder-perl');   EXTRAPACKAGES+=('libextutils-parsexs-perl');
EXTRAPACKAGES+=('libgetopt-long-perl');         EXTRAPACKAGES+=('libinline-perl');              EXTRAPACKAGES+=('libio-string-perl');
EXTRAPACKAGES+=('libio-zlib-perl');             EXTRAPACKAGES+=('libip-country-perl');          EXTRAPACKAGES+=('libmail-spf-perl');
EXTRAPACKAGES+=('libmail-spf-query-perl');      EXTRAPACKAGES+=('libmodule-build-perl');        EXTRAPACKAGES+=('libnet-cidr-lite-perl');
EXTRAPACKAGES+=('libnet-dns-perl');             EXTRAPACKAGES+=('libnet-ldap-perl');            EXTRAPACKAGES+=('libnet-dns-resolver-programmable-perl');
EXTRAPACKAGES+=('libnetaddr-ip-perl');          EXTRAPACKAGES+=('libparse-recdescent-perl');    EXTRAPACKAGES+=('libtest-harness-perl');
EXTRAPACKAGES+=('libtest-manifest-perl');       EXTRAPACKAGES+=('libtext-balanced-perl');       EXTRAPACKAGES+=('liburi-perl');
EXTRAPACKAGES+=('libversion-perl');             EXTRAPACKAGES+=('libio-compress-bzip2-perl');   EXTRAPACKAGES+=('libsendmail-pmilter-perl');
EXTRAPACKAGES+=('libmath-int64-perl');          EXTRAPACKAGES+=('libip-country-db-file-perl');  EXTRAPACKAGES+=('libnamespace-autoclean-perl');
EXTRAPACKAGES+=('libdata-ieee754-perl');        EXTRAPACKAGES+=('libdata-printer-perl');        EXTRAPACKAGES+=('libdata-validate-ip-perl');
EXTRAPACKAGES+=('liblist-allutils-perl');       EXTRAPACKAGES+=('liblist-someutils-perl');      EXTRAPACKAGES+=('libtest-tester-perl');
EXTRAPACKAGES+=('liblist-utilsby-perl');        EXTRAPACKAGES+=('libmaxmind-db-metadata-perl'); EXTRAPACKAGES+=('libmaxmind-db-reader-perl');
EXTRAPACKAGES+=('libmodule-runtime-perl');      EXTRAPACKAGES+=('libmoo-perl');                 EXTRAPACKAGES+=('libmoox-strictconstructor-perl');
EXTRAPACKAGES+=('librole-tiny-perl');           EXTRAPACKAGES+=('libstrictures-perl');          EXTRAPACKAGES+=('libmaxmind-db-reader-xs-perl');
EXTRAPACKAGES+=('libsub-quote-perl');           EXTRAPACKAGES+=('libmath-int128-perl');         EXTRAPACKAGES+=('libnet-works-network-perl');
EXTRAPACKAGES+=('libhttp-date-perl');           EXTRAPACKAGES+=('libbusiness-isbn-perl');       EXTRAPACKAGES+=('libdbd-mysql-perl');
EXTRAPACKAGES+=('libconfig-yaml-perl');         EXTRAPACKAGES+=('libtest-pod-coverage-perl');   EXTRAPACKAGES+=('libfile-sharedir-install-perl');
EXTRAPACKAGES+=('libmail-dkim-perl');           EXTRAPACKAGES+=('libbusiness-isbn-data-perl');  EXTRAPACKAGES+=('libhtml-tokeparser-simple-perl');
EXTRAPACKAGES+=('libgeo-ip-perl');              EXTRAPACKAGES+=('libnet-patricia-perl');        EXTRAPACKAGES+=('libtest-deep-perl');
EXTRAPACKAGES+=('libpath-class-perl');          EXTRAPACKAGES+=('libdata-dumper-concise-perl'); EXTRAPACKAGES+=('libautodie-perl');
EXTRAPACKAGES+=('libtest-requires-perl');       EXTRAPACKAGES+=('libclone-pp-perl');            EXTRAPACKAGES+=('libfile-homedir-perl');
EXTRAPACKAGES+=('libsort-naturally-perl');      EXTRAPACKAGES+=('libjson-maybexs-perl');        EXTRAPACKAGES+=('libdatetime-perl');
EXTRAPACKAGES+=('libtest-warnings-perl');       EXTRAPACKAGES+=('libtest-leaktrace-perl');      EXTRAPACKAGES+=('libthrowable-perl');
EXTRAPACKAGES+=('libalgorithm-diff-perl');      EXTRAPACKAGES+=('libalien-build-perl');         EXTRAPACKAGES+=('libalien-build-plugin-download-gitlab-perl');
EXTRAPACKAGES+=('libalien-libxml2-perl');       EXTRAPACKAGES+=('libb-keywords-perl');          EXTRAPACKAGES+=('libbsd-resource-perl');
EXTRAPACKAGES+=('libcapture-tiny-perl');        EXTRAPACKAGES+=('libconfig-tiny-perl');         EXTRAPACKAGES+=('libdbix-simple-perl');
EXTRAPACKAGES+=('libdevel-cycle-perl');         EXTRAPACKAGES+=('libdevel-hide-perl');          EXTRAPACKAGES+=('libemail-abstract-perl');
EXTRAPACKAGES+=('libemail-address-xs-perl');    EXTRAPACKAGES+=('libemail-date-format-perl');   EXTRAPACKAGES+=('libemail-mime-perl');
EXTRAPACKAGES+=('libemail-mime-encodings-perl');EXTRAPACKAGES+=('libemail-messageid-perl');     EXTRAPACKAGES+=('libemail-mime-contenttype-perl');
EXTRAPACKAGES+=('libemail-sender-perl');        EXTRAPACKAGES+=('libemail-simple-perl');        EXTRAPACKAGES+=('libffi-checklib-perl');
EXTRAPACKAGES+=('libfile-copy-recursive-perl'); EXTRAPACKAGES+=('libfile-chdir-perl');          EXTRAPACKAGES+=('libhook-lexwrap-perl');
EXTRAPACKAGES+=('libio-socket-inet6-perl');     EXTRAPACKAGES+=('libimporter-perl');            EXTRAPACKAGES+=('liblingua-en-inflect-perl');
EXTRAPACKAGES+=('libmime-charset-perl');        EXTRAPACKAGES+=('libmime-types-perl');          EXTRAPACKAGES+=('libmail-dmarc-perl');
EXTRAPACKAGES+=('libmodule-pluggable-perl');    EXTRAPACKAGES+=('libmoox-types-mooselike-perl');EXTRAPACKAGES+=('libmozilla-ca-perl');
EXTRAPACKAGES+=('libnet-idn-encode-perl');      EXTRAPACKAGES+=('libnet-imap-simple-perl');     EXTRAPACKAGES+=('libnet-libidn2-perl');
EXTRAPACKAGES+=('libnet-smtps-perl');           EXTRAPACKAGES+=('libppi-perl');                 EXTRAPACKAGES+=('libppix-quotelike-perl');
EXTRAPACKAGES+=('libppix-regexp-perl');         EXTRAPACKAGES+=('libppix-utilities-perl');      EXTRAPACKAGES+=('libperl-critic-perl');
EXTRAPACKAGES+=('libperl-tidy-perl');           EXTRAPACKAGES+=('libpod-spell-perl');           EXTRAPACKAGES+=('libperl-critic-policy-perlsecret-perl');
EXTRAPACKAGES+=('libreadonly-xs-perl');         EXTRAPACKAGES+=('libregexp-common-perl');       EXTRAPACKAGES+=('libscope-guard-perl');
EXTRAPACKAGES+=('libstring-format-perl');       EXTRAPACKAGES+=('libsub-info-perl');            EXTRAPACKAGES+=('libsub-uplevel-perl');
EXTRAPACKAGES+=('libtask-weaken-perl');         EXTRAPACKAGES+=('libterm-size-any-perl');       EXTRAPACKAGES+=('libterm-size-perl-perl');
EXTRAPACKAGES+=('libterm-table-perl');          EXTRAPACKAGES+=('libtest-exception-perl');      EXTRAPACKAGES+=('libtest-failwarnings-perl');
EXTRAPACKAGES+=('libtest-file-perl');           EXTRAPACKAGES+=('libtest-file-sharedir-perl');  EXTRAPACKAGES+=('libtest-nowarnings-perl');
EXTRAPACKAGES+=('libtest-object-perl');         EXTRAPACKAGES+=('libtest-output-perl');         EXTRAPACKAGES+=('libtest-regexp-perl');
EXTRAPACKAGES+=('libtest-subcalls-perl');       EXTRAPACKAGES+=('libtest2-suite-perl');         EXTRAPACKAGES+=('libtext-diff-perl');
EXTRAPACKAGES+=('libtext-unidecode-perl');      EXTRAPACKAGES+=('libunicode-linebreak-perl');   EXTRAPACKAGES+=('libxml-libxml-perl');
EXTRAPACKAGES+=('libxml-namespacesupport-perl');EXTRAPACKAGES+=('libxml-sax-perl');             EXTRAPACKAGES+=('libxml-sax-base-perl');

# the array of perl modules needed
ARMOD=();
ARMOD+=('Archive::Tar');            ARMOD+=('Archive::Zip');            ARMOD+=('bignum');
ARMOD+=('Carp');                    ARMOD+=('Compress::Zlib');          ARMOD+=('Compress::Raw::Zlib');
ARMOD+=('Convert::BinHex');         ARMOD+=('Convert::TNEF');           ARMOD+=('Data::Dumper');
ARMOD+=('Date::Parse');             ARMOD+=('DBD::SQLite');             ARMOD+=('DBI');
ARMOD+=('Digest::HMAC');            ARMOD+=('Digest::MD5');             ARMOD+=('Digest::SHA1');
ARMOD+=('DirHandle');               ARMOD+=('ExtUtils::MakeMaker');     ARMOD+=('Fcntl');
ARMOD+=('File::Basename');          ARMOD+=('File::Copy');              ARMOD+=('File::Path');
ARMOD+=('File::Spec');              ARMOD+=('File::Temp');              ARMOD+=('FileHandle');
ARMOD+=('Filesys::Df');             ARMOD+=('Getopt::Long');            ARMOD+=('Inline::C');
ARMOD+=('IO');                      ARMOD+=('IO::File');                ARMOD+=('IO::Pipe');
ARMOD+=('IO::Stringy');             ARMOD+=('HTML::Entities');          ARMOD+=('HTML::Parser');
ARMOD+=('HTML::Tagset');            ARMOD+=('HTML::TokeParser');        ARMOD+=('Mail::Field');
ARMOD+=('Mail::Header');            ARMOD+=('Mail::IMAPClient');        ARMOD+=('Mail::Internet');
ARMOD+=('Math::BigInt');            ARMOD+=('Math::BigRat');            ARMOD+=('MIME::Base64');
ARMOD+=('MIME::Decoder');           ARMOD+=('MIME::Decoder::UU');       ARMOD+=('MIME::Head');
ARMOD+=('MIME::Parser');            ARMOD+=('MIME::QuotedPrint');       ARMOD+=('MIME::Tools');
ARMOD+=('MIME::WordDecoder');       ARMOD+=('Net::CIDR');               ARMOD+=('Net::DNS');
ARMOD+=('Net::IP');                 ARMOD+=('OLE::Storage_Lite');       ARMOD+=('Pod::Escapes');
ARMOD+=('Pod::Simple');             ARMOD+=('POSIX');                   ARMOD+=('Scalar::Util');
ARMOD+=('Socket');                  ARMOD+=('Storable');                ARMOD+=('Test::Harness');
ARMOD+=('Test::Pod');               ARMOD+=('Test::Simple');            ARMOD+=('Time::HiRes');
ARMOD+=('Time::localtime');         ARMOD+=('Sys::Hostname::Long');     ARMOD+=('Sys::SigAction');
ARMOD+=('Sys::Syslog');             ARMOD+=('Env');                     ARMOD+=('Test::Fatal');
ARMOD+=('Data::Dump');              ARMOD+=('DB_File');                 ARMOD+=('namespace::autoclean');
ARMOD+=('MailTools');               ARMOD+=('Digest');                  ARMOD+=('Encode::Detect');
ARMOD+=('Error');                   ARMOD+=('ExtUtils::CBuilder');      ARMOD+=('ExtUtils::ParseXS');
ARMOD+=('Getopt::Long');            ARMOD+=('Inline');                  ARMOD+=('IO::String');
ARMOD+=('IO::Zlib');                ARMOD+=('IP::Country');             ARMOD+=('Mail::SPF');
ARMOD+=('Mail::SPF::Query');        ARMOD+=('Module::Build');           ARMOD+=('Net::CIDR::Lite');
ARMOD+=('Net::DNS');                ARMOD+=('Net::LDAP');               ARMOD+=('Net::DNS::Resolver::Programmable');
ARMOD+=('NetAddr::IP');             ARMOD+=('Parse::RecDescent');       ARMOD+=('Test::Harness');
ARMOD+=('Test::Manifest');          ARMOD+=('Text::Balanced');          ARMOD+=('URI');
ARMOD+=('version');                 ARMOD+=('IO::Compress::Bzip2');     ARMOD+=('Sendmail::PMilter');
ARMOD+=('Math::Int64');             ARMOD+=('IP::Country::DB_File');    ARMOD+=('namespace::autoclean');
ARMOD+=('Data::IEEE754');           ARMOD+=('Data::Printer');           ARMOD+=('Data::Validate::IP');
ARMOD+=('List::AllUtils');          ARMOD+=('List::SomeUtils');         ARMOD+=('Test::Tester');
ARMOD+=('List::UtilsBy');           ARMOD+=('MaxMind::DB::Metadata');   ARMOD+=('MaxMind::DB::Reader');
ARMOD+=('Module::Runtime');         ARMOD+=('Moo');                     ARMOD+=('MooX::StrictConstructor');
ARMOD+=('Role::Tiny');              ARMOD+=('strictures');              ARMOD+=('MaxMind::DB::Reader::XS');
ARMOD+=('Sub::Quote');              ARMOD+=('Math::Int128');            ARMOD+=('Net::Works::Network');
ARMOD+=('HTTP::Date');              ARMOD+=('Business::ISBN');          ARMOD+=('DBD::mysql');
ARMOD+=('Config::YAML');            ARMOD+=('Test::Pod::Coverage');     ARMOD+=('File::ShareDir::Install');
ARMOD+=('Mail::DKIM');              ARMOD+=('Business::ISBN::Data');    ARMOD+=('HTML::TokeParser::Simple');
ARMOD+=('Geo::IP');                 ARMOD+=('Net::Patricia');           ARMOD+=('Test::Deep');
ARMOD+=('Path::Class');             ARMOD+=('Data::Dumper::Concise');   ARMOD+=('autodie');
ARMOD+=('Test::Requires');          ARMOD+=('Clone::PP');               ARMOD+=('File::HomeDir');
ARMOD+=('Sort::Naturally');         ARMOD+=('JSON::MaybeXS');           ARMOD+=('DateTime');
ARMOD+=('Test::Warnings');          ARMOD+=('Test::LeakTrace');         ARMOD+=('Throwable');
ARMOD+=('Algorithm::Diff');         ARMOD+=('Alien::Build');            ARMOD+=('Alien::Build::Plugin::Download::GitLab');
ARMOD+=('Alien::Libxml2');          ARMOD+=('B::Keywords');             ARMOD+=('BSD::Resource');
ARMOD+=('Capture::Tiny');           ARMOD+=('Config::Tiny');            ARMOD+=('DBIx::Simple');
ARMOD+=('Devel::Cycle');            ARMOD+=('Devel::Hide');             ARMOD+=('Email::Abstract');
ARMOD+=('Email::Address::XS');      ARMOD+=('Email::Date::Format');     ARMOD+=('Email::MIME');
ARMOD+=('Email::MIME::Encodings');  ARMOD+=('Email::MessageID');        ARMOD+=('Email::MIME::ContentType');
ARMOD+=('Email::Sender');           ARMOD+=('Email::Simple');           ARMOD+=('FFI::CheckLib');
ARMOD+=('File::Copy::Recursive');   ARMOD+=('File::chdir');             ARMOD+=('Hook::LexWrap');
ARMOD+=('IO::Socket::INET6');       ARMOD+=('Importer');                ARMOD+=('Lingua::EN::Inflect');
ARMOD+=('MIME::Charset');           ARMOD+=('MIME::Types');             ARMOD+=('Mail::DMARC');
ARMOD+=('Module::Pluggable');       ARMOD+=('MooX::Types::MooseLike');  ARMOD+=('Mozilla::CA');
ARMOD+=('Net::IDN::Encode');        ARMOD+=('Net::IMAP::Simple');       ARMOD+=('Net::LibIDN2');
ARMOD+=('Net::SMTPS');              ARMOD+=('PPI');                     ARMOD+=('PPIx::QuoteLike');
ARMOD+=('PPIx::Regexp');            ARMOD+=('PPIx::Utilities');         ARMOD+=('Perl::Critic');
ARMOD+=('Perl::Tidy');              ARMOD+=('Pod::Spell');              ARMOD+=('Perl::Critic::Policy::Perlsecret');
ARMOD+=('Readonly::XS');            ARMOD+=('Regexp::Common');          ARMOD+=('Scope::Guard');
ARMOD+=('String::Format');          ARMOD+=('Sub::Info');               ARMOD+=('Sub::Uplevel');
ARMOD+=('Task::Weaken');            ARMOD+=('Term::Size::Any');         ARMOD+=('Term::Size::Perl');
ARMOD+=('Term::Table');             ARMOD+=('Test::Exception');         ARMOD+=('Test::FailWarnings');
ARMOD+=('Test::File');              ARMOD+=('Test::File::ShareDir');    ARMOD+=('Test::NoWarnings');
ARMOD+=('Test::Object');            ARMOD+=('Test::Output');            ARMOD+=('Test::Regexp');
ARMOD+=('Test::SubCalls');          ARMOD+=('Test2::Suite');            ARMOD+=('Text::Diff');
ARMOD+=('Text::Unidecode');         ARMOD+=('Unicode::LineBreak');      ARMOD+=('XML::LibXML');
ARMOD+=('XML::NamespaceSupport');   ARMOD+=('XML::SAX');                ARMOD+=('XML::SAX::Base');

# additional spamassassin plugins
SAMOD=();
SAMOD+=('Mail::SpamAssassin')
SAMOD+=('Mail::SpamAssassin::Plugin::Rule2XSBody');
SAMOD+=('Mail::SpamAssassin::Plugin::DCC');
SAMOD+=('Mail::SpamAssassin::Plugin::Pyzor');

(
clear
echo;
echo "Installation/configuration results are being logged to /var/log/mailscanner-configuration.log";
echo;
timewait 1

# install the basics
echo "Installing required system packages ..."; echo;
timewait 2

# install required perl and base packages that are available via apt
#
$APTGET update

for i in "${BASEPACKAGES[@]}"
do
    $APTGET -yf install $i
done

# Look for packaged perl modules and install them via apt
# some items may not be available depending on the distribution 
# release but those items will be checked after this and installed
# via cpan if the user elected to do so.
for i in "${EXTRAPACKAGES[@]}"
do
    $APTGET -yf install $i
done

# install this separate in case it conflicts
if [ "x$MTAOPTION" != "x" ]; then
    $APTGET -yf install $MTAOPTION
    if [ $? != 0 ]; then
        echo "Error installing $MTAOPTION MTA"
        echo "This usually means an MTA is already installed."
    fi
fi

# install missing unrar if the user elected to do so
if [ $UNRAROPTION -eq 1 ]; then
    # user elected to use unrar RPM option
    if [ ! -x '/usr/bin/unrar' ]; then
        cd /tmp
        rm -f unrar-6.2.5*
        clear
        echo;
        echo "unrar missing. Installing via dpkg ..."; echo;

        $CURL -LO https://mirrors.efa-project.org/msv5/DEB/unrar_6.2.5-1_amd64.deb
        if [ -f 'unrar_6.2.5-1_amd64.deb' ]; then
          /usr/bin/dpkg -i unrar_6.2.5-1_amd64.deb
        else
          echo "NOTICE: I cannot find a suitable deb to install unrar";
          timewait 5
        fi
        
        # back to where i started
        rm -f unrar-6.2.5*
        cd "$THISCURRPMDIR"
    fi
fi

# fix the stupid line in /etc/freshclam.conf that disables freshclam 
if [ $CAV -eq 1 ]; then
    clear
    echo;
    echo "Installing ClamAV via apt ... "; echo;
    timewait 3
    $APTGET -y install $CAVOPTION
    COUT='#Example';
    if [ -f "/etc/freshclam.conf" ]; then
        perl -pi -e 's/Example/'$COUT'/;' /etc/freshclam.conf
    fi
fi

# check for curl
if [ ! -x /usr/bin/curl ]; then
    clear
    echo;
    echo "The curl command cannot be found. I have already attempted to install this";
    echo "package, but it is still not found. Please ensure that you have network access";
    echo "to the internet and try running the installation again.";
    echo;
    exit 1
else
    CURL='/usr/bin/curl';
fi

# create the cpan config if there isn't one and the user
# elected to use CPAN
if [ $CPANOPTION -eq 1 ]; then
    # user elected to use CPAN option
    if [ ! -f '/root/.cpan/CPAN/MyConfig.pm' ]; then
        echo;
        echo "CPAN config missing. Creating one ..."; echo;
        mkdir -p /root/.cpan/CPAN
        cd /root/.cpan/CPAN
        $CURL -LO https://mirrors.efa-project.org/msv5/CPAN/DEB/root/MyConfig.pm
        cd $THISCURRPMDIR
        timewait 1
        perl -MCPAN -e 'my $c = "CPAN::HandleConfig"; $c->load(doit => 1, autoconfig => 1); $c->edit(prerequisites_policy => "follow"); $c->edit(build_requires_install_policy => "yes"); $c->commit'
    fi
fi

# now check for missing perl modules and install them via cpan
# if the user elected to do so
clear; echo;
echo "Checking Perl Modules ... "; echo;
timewait 2
# used to trigger a wait if something this missing
PMODWAIT=0

# CPAN automation invoked?
if [ $CPANOPTION -eq 1 ]; then
    AUTOCPAN=1
    # Install cpanminus
    $APTGET  -y install cpanminus
    if [ $? -ne 0 ]; then
        echo "Error installing cpanminus, falling back to perl invocation method."
        AUTOCPAN=0
    fi
else
    AUTOCPAN=0
fi

# remediate
if [ ${CPANOPTION} -eq 1 ]; then
    #Install pre SpamAssassin modules
    for i in "${ARMOD[@]}"
    do
        perldoc -l ${i} >/dev/null 2>&1
        if [ $? -ne 0 ]; then
            clear
            echo "${i} is missing. Installing via CPAN ..."; echo;
            timewait 1
            if [ $AUTOCPAN -eq 0 ]; then
                perl -MCPAN -e "CPAN::Shell->force(qw(install ${i} ));"
            else
                cpanm --force --no-interactive $i
            fi
        fi
    done
fi

function install_sa() {
    # Create sabuild user and set up for sudo build (SA 4.0+)
    useradd -m -s /usr/sbin/nologin sabuild &>/dev/null
    id -u sabuild &>/dev/null
    if [ $? -eq 0 ]; then
        echo "sabuild    ALL=(ALL)    NOPASSWD: ALL" > /etc/sudoers.d/sabuild
        if [ ! -f '/home/sabuild/.cpan/CPAN/MyConfig.pm' ]; then
            echo;
            echo "CPAN config missing. Creating one ..."; echo;
            mkdir -p /home/sabuild/.cpan/CPAN
            cd /home/sabuild/.cpan/CPAN
            $CURL -LO https://mirrors.efa-project.org/msv5/CPAN/DEB/sabuild/MyConfig.pm
            chown -R sabuild:sabuild /home/sabuild/.cpan
            cd "$THISCURRPMDIR"
        fi

        for i in "${SAMOD[@]}"
        do
            perldoc -l $i >/dev/null 2>&1
            if [[ $? -ne 0 || $1 == "update" ]]; then
                if [ $CPANOPTION -eq 1 ]; then
                    clear
                    echo "$i is missing or needs updated. Installing via CPAN ..."; echo;
                    timewait 1
                    su - sabuild -s /bin/bash -c "echo \"\\\n\" | perl -MCPAN -e \"CPAN::Shell->force(qw(install $i ));\""
                else
                    echo "WARNING: $i is missing. You should fix this.";
                    PMODWAIT=5
                fi
            else
                echo "$i => OK";
            fi
        done

        # Cleanup, just revoke sudo privs
        rm -f /etc/sudoers.d/sabuild
    else
        echo "Unable to create sabuild user, cannot install spamassassin"
        echo "You should fix this."
    fi
}

install_sa

# Update perl modules
if [[ -n "${arg_update+x}" && $AUTOCPAN -ne 0 ]]; then
    cpanm App::cpanoutdated
    for i in $(cpan-outdated -p); do
      if [ "$i" == "Mail::SpamAssassin" ]; then
        # Check for spamassassin apt and notify user
        /usr/bin/dpkg-query -W libmail-spamassassin-perl &>/dev/null
        if [ $? -eq 0 ]; then
          echo "Spamassassin detected installed via apt.  To update spamassassin use your package manager."
          timewait 1
        else
          install_sa "update"
        fi
      else
        cpanm --force --no-interactive $i
      fi
    done
fi

# check and notify of any missing modules
ARMODALL=("${ARMOD[@]}" "${SAMOD}")
for i in "${ARMODALL[@]}"
do
    perldoc -l ${i} >/dev/null 2>&1
    if [ $? -ne 0 ]; then

        echo "WARNING: $i is missing.";
        PMODWAIT=5

    else
        echo "${i} => OK";
    fi
done

# will pause if a perl module was missing
timewait ${PMODWAIT}

clear
echo;
echo "Preparing MailScanner ... ";

# check for common users and add to the mtagroup
if id -u clam >/dev/null 2>&1; then
    usermod -a -G mtagroup clam >/dev/null 2>&1
fi

if id -u clamav >/dev/null 2>&1; then
    usermod -a -G mtagroup clamav >/dev/null 2>&1
fi

if id -u clamscan >/dev/null 2>&1; then
    usermod -a -G mtagroup clamscan >/dev/null 2>&1
fi

if id -u vscan >/dev/null 2>&1; then
    usermod -a -G mtagroup vscan >/dev/null 2>&1
fi

if id -u sophosav >/dev/null 2>&1; then
    usermod -a -G mtagroup sophosav >/dev/null 2>&1
fi

if id -u Debian-exim >/dev/null 2>&1; then
    usermod -a -G mtagroup Debian-exim >/dev/null 2>&1
fi

if id -u postfix >/dev/null 2>&1; then
    usermod -a -G mtagroup postfix >/dev/null 2>&1
    chown postfix /var/spool/MailScanner/milterin >/dev/null 2>&1
    chown postfix /var/spool/MailScanner/milterout >/dev/null 2>&1
fi

if id -u mail >/dev/null 2>&1; then
    usermod -a -G mtagroup mail >/dev/null 2>&1
fi

if id -u avast >/dev/null 2>&1; then
    usermod -a -G mtagroup avast >/dev/null 2>&1
fi

if [ -d '/var/spool/exim4.in' ]; then
    chown Debian-exim:mtagroup /var/spool/exim4.in
    chmod 0750 /var/spool/exim4.in
    chown Debian-exim:mtagroup /var/spool/exim4.in/db
    chmod 0750 /var/spool/exim4.in/db
    chown Debian-exim:mtagroup /var/spool/exim4.in/input
    chmod 0750 /var/spool/exim4.in/input
    chown Debian-exim:mtagroup /var/spool/exim4.in/msglog
    chmod 0750 /var/spool/exim4.in/msglog
fi

if [ ! -d '/var/spool/mqueue.in' ]; then
    perl -pi -e 's{Incoming Queue Dir = /var/spool/mqueue.in}{Incoming Queue Dir = /var/spool/mqueue}g;' /etc/MailScanner/MailScanner.conf
fi

# create symlink for spamasassin
if [ -d '/etc/mail/spamassassin' -a ! -L '/etc/mail/spamassassin/MailScanner.cf' -a -f '/etc/MailScanner/spamassassin.conf' -a ! -f '/etc/mail/spamassassin/MailScanner.cf' ]; then
    ln -s /etc/MailScanner/spamassassin.conf /etc/mail/spamassassin/MailScanner.cf
fi
# fix the clamav wrapper if the user does not exist
if [ -d '/etc/clamav' ]; then

    DISTROCAVUSER='ClamUser="clamav"';
    DISTROCAVGRP='ClamGroup="clamav"';
    
    # check for common users and add to the mtagroup
    if id -u clam >/dev/null 2>&1; then
        CAVUSR='ClamUser="clam"';
    fi

    if id -u clamav >/dev/null 2>&1; then
        CAVUSR='ClamUser="clamav"';
    fi

    if id -u clamscan >/dev/null 2>&1; then
        CAVUSR='ClamUser="clamscan"';
    fi
    
    if getent group clamav >/dev/null 2>&1; then
        CAVGRP='ClamGroup="clamav"';
    fi

    if getent group clam >/dev/null 2>&1; then
        CAVGRP='ClamGroup="clam"';
    fi
    
    if getent group clamscan >/dev/null 2>&1; then
        CAVGRP='ClamGroup="clamscan"';
    fi

    if [ -f '/usr/lib/MailScanner/wrapper/clamav-wrapper' ]; then
        sed -i "s/${DISTROCAVUSER}/${CAVUSR}/g" /usr/lib/MailScanner/wrapper/clamav-wrapper
        sed -i "s/${DISTROCAVGRP}/${CAVGRP}/g" /usr/lib/MailScanner/wrapper/clamav-wrapper
    fi
    
    if [ -f '/etc/apparmor.d/usr.sbin.clamd' ]; then
            
        # add to include for clamd
        if [ -f '/etc/apparmor.d/local/usr.sbin.clamd' ]; then
            echo '/var/spool/MailScanner/incoming/** krw,' > /etc/apparmor.d/local/usr.sbin.clamd
            echo '/var/spool/MailScanner/incoming/** ix,' >> /etc/apparmor.d/local/usr.sbin.clamd
            
        fi
    fi

    # fix old style clamav Monitors if preset in old mailscanner.conf
    CAVOLD='^Monitors for ClamAV Updates.*';
    CAVNEW='Monitors for ClamAV Updates = \/usr\/local\/share\/clamav\/\*\.cld \/usr\/local\/share\/clamav\/\*\.cvd \/var\/lib\/clamav\/\*\.inc\/\* \/var\/lib\/clamav\/\*\.\?db \/var\/lib\/clamav\/\*\.cvd';
    if [ -f '/etc/MailScanner/MailScanner.conf' ]; then
        sed -i "s/${CAVOLD}/${CAVNEW}/g" /etc/MailScanner/MailScanner.conf
    fi

fi

# set the correct sock for debian systems
CAVOLD='^Clamd Socket.*';
CAVNEW='Clamd Socket = \/var\/run\/clamav\/clamd\.ctl';
if [ -f '/etc/MailScanner/MailScanner.conf' ]; then
    sed -i "s/${CAVOLD}/${CAVNEW}/g" /etc/MailScanner/MailScanner.conf
fi

# set the correct lock file for debian systems
CAVOLD='^Clamd Lock File.*';
CAVNEW='Clamd Lock File =';
if [ -f '/etc/MailScanner/MailScanner.conf' ]; then
    sed -i "s/${CAVOLD}/${CAVNEW}/g" /etc/MailScanner/MailScanner.conf
fi

# allow supplementary groups
CAVOLD='^#AllowSupplementaryGroups.*';
CAVNEW='AllowSupplementaryGroups true';
if [ -f '/etc/clamav/clamd.conf' ]; then
    sed -i "s/${CAVOLD}/${CAVNEW}/g" /etc/clamav/clamd.conf
fi

# # install the mailscanner package
# dpkg -i ${CONFFILES} ${NODEPS} "${THISCURRPMDIR}"/MailScanner-*-noarch.deb

# if [ $? -ne 0 ]; then
#     echo;
#     echo '----------------------------------------------------------';
#     echo 'Installation Error'; echo;
#     echo 'The MailScanner package failed to install. Address the required';
#     echo 'dependencies and run the installer again.';
#     echo;
#     echo 'Note that Perl modules need to be available system-wide. A';
#     echo 'common issue is that missing modules were installed in a ';
#     echo 'user specific configuration.';
#     echo;
# else
    # create ramdisk
    if [ $RAMDISK -eq 1 ]; then
        if [ -d '/var/spool/MailScanner/incoming' ]; then
            echo "Creating the ramdisk ...";
            echo;
            DISK="/var/spool/MailScanner/incoming";
            FSTYPE=$(df -P -T ${DISK}|tail -n +2 | awk '{print $2}')

            if [ $FSTYPE != tmpfs ]; then
                mount -t tmpfs -o size=${RAMDISKSIZE}M tmpfs ${DISK}
                echo "tmpfs ${DISK} tmpfs rw,size=${RAMDISKSIZE}M 0 0" >> /etc/fstab
                echo "Enabling ramdisk sync ...";
                if [ -f '/etc/MailScanner/defaults' ]; then
                    OLD="^ramdisk_sync=0";
                    NEW="ramdisk_sync=1";
                    sed -i "s/${OLD}/${NEW}/g" /etc/MailScanner/defaults
                fi
            else
                echo "${DISK} is already a RAMDISK!"; echo;
            fi
        fi
    fi

    /usr/sbin/ms-update-phishing >/dev/null 2>&1
    
    if [ -d '/etc/clamav' ]; then
        #Test if freshclam is already running
        if [[ -z $(ps aux | grep "[f]reshclam") ]]; then
            /usr/bin/freshclam 2>/dev/null
        fi
    fi

    ldconfig

    if [[ -n "${arg_update+x}" ]]; then
        echo;
        echo '----------------------------------------------------------';
        echo 'Configuration and module update complete';
        echo;
        echo 'See http://www.mailscanner.info for more information and  '
        echo 'support via the MailScanner mailing list.'
        echo;
        echo;
        echo To finish updating MailScanner, review the following files:
        echo
        echo /etc/MailScanner/defaults
        echo /etc/MailScanner/MailScanner.conf
        echo
        echo Restart MailScanner
        echo
        echo    --SysV Init--
        echo    service mailscanner restart
        echo
        echo    --Systemd--
        echo    systemctl restart mailscanner.service
        echo
        echo Restart MSMilter \(if in use\) 
        echo
        echo    --SysV Init--
        echo    service msmilter restart
        echo
        echo    --Systemd--
        echo    systemctl restart msmilter.service
        echo
    else
        echo;
        echo '----------------------------------------------------------';
        echo 'Initial configuration and module installation complete';
        echo;
        echo 'See http://www.mailscanner.info for more information and  '
        echo 'support via the MailScanner mailing list.'
        echo;
        echo;
        echo To finish configuring MailScanner, edit the following files:
        echo
        echo /etc/MailScanner/defaults
        echo /etc/MailScanner/MailScanner.conf
        echo
        echo
        echo To activate MailScanner run the following commands:
        echo
        echo    --SysV Init--
        echo    service mailscanner start
        echo
        echo    --Systemd--
        echo    systemctl start mailscanner.service
        echo
        echo To activate MSMilter \(if in use\) run the following commands:
        echo
        echo    --SysV Init--
        echo    chkconfig msmilter on
        echo    service msmilter start
        echo
        echo    --Systemd--
        echo    systemctl enable msmilter.service
        echo    systemctl start msmilter.service
        echo
    fi 

) 2>&1 | tee -a /var/log/mailscanner-configuration.log
