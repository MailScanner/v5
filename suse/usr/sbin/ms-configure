#!/usr/bin/env bash
#
# MailScanner configuration script for SUSE based systems
#
# This script installs the required software for
# MailScanner via zypper and CPAN based on user input.  
#
# Tested distributions:     OpenSUSE Leap 15.4
#
# Updated: 19 Feb 2023
# MailScanner Team <https://www.mailscanner.info>

# clear the screen. yay!
clear

# check for missing path to /usr/local/bin
if [[ !($PATH =~ /\/usr\/local\/bin/) ]]; then
  export PATH="$PATH:/usr/local/bin"
fi

# unattended configuration: command line parameter parsing
parsedCommands=0;
while [ $# -gt 0 ]; do
    case "$1" in
        --update)
            # Select defaults and move forward
            arg_MTA="none";
            arg_installClamav=0;
            arg_installCPAN=1;
            arg_ramdiskSize=0;
            arg_update=1;
            ((parsedCommands++));
        ;;

        --MTA=*)
            case ${1#*=} in
            "sendmail")  arg_MTA="sendmail"; ((parsedCommands++));;
            "postfix")   arg_MTA="postfix"; ((parsedCommands++));;
            "exim")      arg_MTA="exim4-base"; ((parsedCommands++));;
            "none")      arg_MTA=; ((parsedCommands++));;
            *)
                printf "Error: Invalid value for MTA: select one of 'sendmail', 'postfix', 'exim' or 'none'.\n"
                exit 1
            esac
        ;;

        --installClamav=*)
            if [[ ${1#*=} =~ ^([yY])$ ]]; then
                arg_installClamav=1;
                ((parsedCommands++));
            elif [[ ${1#*=} =~ ^([nN])$ ]]; then
                arg_installClamav=0;
                ((parsedCommands++));
            else
                printf "Error: Invalid value for installClamav: only Y or N values are accepted.\n"
                exit 1
            fi
        ;;

        --installCPAN=*)
            if [[ ${1#*=} =~ ^([yY])$ ]]; then
                arg_installCPAN=1;
                ((parsedCommands++));
            elif [[ ${1#*=} =~ ^([nN])$ ]]; then
                arg_installCPAN=0;
                ((parsedCommands++));
            else
                printf "Error: Invalid value for installCPAN: only Y or N values are accepted.\n"
                exit 1
            fi
        ;;

        --ramdiskSize=*)
            if [[ ${1#*=} =~ ^-?[0-9]+$ ]]; then
                arg_ramdiskSize="${1#*=}";
                ((parsedCommands++));
            else
                printf "Error: Invalid value for ramdiskSize: only integer values are accepted.\n"
                exit 1
            fi
        ;;

        --help)
            printf "MailScanner configuration for SuSE Based Systems\n\n"
            printf "Usage: %s [--update] [--MTA=sendmail|postfix|exim|none] [--installClamav=Y|N] [--installCPAN=Y|N] [--ignoreDeps=Y|N] [--ramdiskSize=value]\n\n" "$0"
            printf -- "--update              Perform an update on an existing install using the following options (can be overridden):\n"
            printf    "                        --MTA=none        (assumed already installed)\n"
            printf    "                        --installClamav=N (assumed already installed)\n"
            printf    "                        --installCPAN=Y\n"
            printf    "                        --ignoreDeps=N\n"
            printf    "                        --ramdiskSize=0   (assumed already configured)\n\n"
            printf -- "--MTA=value           Select the Mail Transfer Agent (MTA) to be installed            (sendmail|postfix|exim|none)\n"
            printf    "                      Recommended: sendmail\n\n"
            printf -- "--installClamav=Y|N   Install or update ClamAV during installation                   (Y or N)\n"
            printf    "                      Recommended: Y (yes)\n\n"
            printf -- "--installCPAN=Y|N     Install missing perl modules via CPAN                           (Y or N)\n"
            printf    "                      Recommended: Y (yes)\n\n"
            printf -- "--ramdiskSize=value   Create a RAMDISK for incoming spool directory                   (integer value or 0 for none)\n"
            printf    "                      Suggestions:\n";
            printf    "                      None         0\n";
            printf    "                      Small        256\n";
            printf    "                      Medium       512\n";
            printf    "                      Large        1024 or 2048\n";
            printf    "                      Enterprise   4096 or 8192\n";
            exit 0
        ;;

        *)
            printf "Error: Invalid argument \"%s\".\n\n" "$1"
            printf "See help with %s --help\n" "$0"
            exit 1
    esac
    shift
done

# where i started for RPM install
THISCURRPMDIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

# Function used to Wait for n seconds
timewait () {
    DELAY=$1
    sleep $DELAY
}

# Check for root user
if [ $(whoami) != "root" ]; then
    clear
    echo;
    echo "Configuration must be run as root. Aborting. Use 'su -' to switch to the root environment."; echo;
    exit 192
fi

# bail if zypper is not installed
if [ ! -x '/usr/bin/zypper' ]; then
    clear
    echo;
    echo "Zypper package manager is not installed. You must install this before starting";
    echo "the MailScanner configuration process. Configuration aborted."; echo;
    exit 192
else
    ZYPPER='/usr/bin/zypper';
fi

# confirm the RHEL release is known before continuing
if [ -f '/etc/redhat-release' ]; then
    # this is mostly to prevent accidental installation on a non redhat based system
    echo "This appears to be a Red Hat based system. This configuration tool is for SuSE. Configuration aborted."; echo;
    exit 192
fi

# user info screen before the install process starts
echo "MailScanner Configuration for SUSE Based Systems"; echo; echo;
echo "This will INSTALL or UPGRADE the required software for MailScanner on SuSE based systems";
echo "via the zypper package manager. Tested distributions are openSUSE 15.4+ and associated";
echo "variants. Internet connectivity is required for this configuration script to execute."; 
echo;
echo "WARNING - Make a backup of any custom configuration files if upgrading - WARNING";
echo;
echo "To install SpamAssassin 4.0, an unprivileged user 'sabuild' will be created and granted";
echo "temporary sudo privileges. This is necessary to obtain a successful build. sudo privileges";
echo "will be removed after install, and you can optionally remove the 'sabuild' user at any time";
echo;
echo "You may press CTRL + C at any time to abort the configuration. Note that you may see";
echo "some errors during the perl module installation. You may safely ignore errors regarding";
echo "failed tests if you opt to use CPAN. You may also ignore 'No package available' notices";
echo "during the zypper installation of packages."; echo;
if [ "$parsedCommands" -eq 0 ]; then
    echo "When you are ready to continue, press return ... ";
    read foobar
fi

# ask if the user wants an mta installed
clear
echo;
echo "Do you want to install a Mail Transfer Agent (MTA)?"; echo;
echo "I can install an MTA via the zypper package manager to save you the trouble of having to do";
echo "this later. If you plan on using an MTA that is not listed below, you will have install ";
echo "it manually yourself if you have not already done so.";
echo;
echo "1 - sendmail";
echo "2 - postfix";
echo "3 - exim";
echo "N - Do not install";
echo;
echo "Recommended: 1 (sendmail)"; echo;
if [ -z "${arg_MTA+x}" ]; then
    read -r -p "Install an MTA? [1] : " response
    if [[ $response =~ ^([nN][oO])$ ]]; then
        # do not install
        MTAOPTION=
    elif [ -z $response ]; then    
        # sendmail default
        MTAOPTION="sendmail";
    elif [ $response -eq 1 ]; then    
        # sendmail 
        MTAOPTION="sendmail";    
    elif [ $response -eq 2 ]; then    
        # postfix
        MTAOPTION="postfix";
    elif [ $response -eq 3 ]; then    
        # exim
        MTAOPTION="exim";        
    else
        MTAOPTION=
    fi
else
    MTAOPTION=${arg_MTA};
fi

# clamav
clear
echo;
echo "Do you want to install or update ClamAV during this installation process?"; echo;
echo "This package is recommended unless you plan on using a different virus scanner.";
echo "Note that you may use more than one virus scanner at once with MailScanner.";
echo;
echo "Even if you already have ClamAV installed you should select this option so I";
echo "will know to check the clamav-wrapper and make corrections if required.";
echo;
echo "Recommended: Y (yes)"; echo;
if [ -z "${arg_installClamav+x}" ]; then
    read -r -p "Install or update ClamAV? [n/Y] : " response
    if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
        # user wants clam av installed
        # some of these options may result in a 'no package available' on
        # some distributions, but that is ok
        CAV=1
        CAVOPTION="pcre-devel clamav monitoring-plugins-clamav";
    elif [ -z $response ]; then  
        CAV=1
        CAVOPTION="pcre-devel clamav monitoring-plugins-clamav";
    else
        # user does not want clam av
        CAV=0
        CAVOPTION=
    fi
else
    CAV=${arg_installClamav}
    CAVOPTION=
    if [ ${CAV} -eq 1 ]; then
        CAVOPTION="pcre-devel clamav monitoring-plugins-clamav";
    fi
fi

# no longer asking - just get spamassassin installed
SA=1
SAOPTION="spamassassin"

# ask if the user wants missing modules installed via CPAN
clear
echo;
echo "Do you want to install missing perl modules via CPAN?"; echo;
echo "I will attempt to install Perl modules via zypper, but some may not be unavailable during the";
echo "installation process. Missing modules will likely cause MailScanner to malfunction.";
echo;
echo "Recommended: Y (yes)"; echo;
if [ -z "${arg_installCPAN+x}" ]; then
    read -r -p "Install missing Perl modules via CPAN? [n/Y] : " response

    if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then
        # user wants to use CPAN for missing modules
        CPANOPTION=1
        
        # rpm install will fail if the modules were not installed via RPM
        # so i am setting the --nodeps flag here since the user elected to 
        # use CPAN to remediate the modules
        NODEPS='--nodeps';
    elif [ -z $response ]; then 
         # user wants to use CPAN for missing modules
        CPANOPTION=1
        
        # rpm install will fail if the modules were not installed via RPM
        # so i am setting the --nodeps flag here since the user elected to 
        # use CPAN to remediate the modules
        NODEPS='--nodeps';
    else
        # user does not want to use CPAN
        CPANOPTION=0
    fi
else
    CPANOPTION=${arg_installCPAN}
    if [ $CPANOPTION -eq 1 ]; then
        NODEPS='--nodeps';
    fi
fi

# ask if the user wants to add a ramdisk
clear
echo;
echo "Do you want to create a RAMDISK?"; echo;
echo "This will create a mount in /etc/fstab that attaches the processing"; 
echo "directory /var/spool/MailScanner/incoming to a RAMDISK, which greatly"; 
echo "increases processing speed at the cost of the reservation of some of";
echo "the system RAM. The size depends on the number of MailScanner children,";
echo "the number of messages per batch, and incoming email volume."
echo;
echo "Specify a size in MB or leave blank for none.";
echo;
echo "Suggestions:";
echo "		None		0";
echo "		Small		256";
echo "		Medium		512";
echo " 		Large 		1024 or 2048";
echo " 		Enterprise	4096 or 8192";
echo;
echo "Example: 1024"; echo;

if [ -z "${arg_ramdiskSize+x}" ]; then
    read -r -p "Specify a RAMDISK size? [0] : " RAMDISKSIZE
    if [[ $RAMDISKSIZE =~ ^[0-9]+$ ]]; then
        if [ $RAMDISKSIZE != 0 ]; then
            # user wants ramdisk
            RAMDISK=1
        else
            RAMDISK=0
        fi
    else
        # no ramdisk
        RAMDISK=0
    fi
else
   if [ ${arg_ramdiskSize} -eq 0 ]; then
        # no ramdisk
        RAMDISK=0;
    else
        RAMDISK=1;
        RAMDISKSIZE=${arg_ramdiskSize};
    fi
fi

# base system packages
BASEPACKAGES="
        binutils            gcc             glibc-devel
        libaio1             make            man-pages 
        patch               rpm             tar 
        time                unzip           which
        zip                 libtool         perl
        curl                wget            openssl
        libopenssl-devel    bzip2           tnef
        unrar               razor-agents    libbz2-devel
        sudo                libidn2-devel   libdb-4_8-devel
        re2c                p7zip           libmaxminddb-devel
";

# Packages (maybe) available in the suse base 15.4. If the user elects not to use EPEL or if the 
# package is not available for their distro release it will be ignored during the install.
#
MOREPACKAGES="
            perl-Archive-Tar        perl-Archive-Zip            perl-bignum
            perl-Carp               perl-Compress-Zlib          perl-Compress-Raw-Zlib
            perl-Convert-BinHex     perl-Convert-TNEF           perl-Data-Dumper
            perl-Date-Parse         perl-DBD-SQLite             perl-Digest-SHA1
            perl-Digest-HMAC        perl-Digest-MD5             perl-DBI
            perl-DirHandle          perl-ExtUtils-MakeMaker     perl-Fcntl
            perl-File-Basename      perl-File-Copy              perl-File-Path
            perl-File-Spec          perl-File-Temp              perl-FileHandle
            perl-Filesys-Df         perl-Getopt-Long            perl-Inline-C
            perl-IO                 perl-IO-File                perl-IO-Pipe
            perl-IO-Stringy         perl-HTML-Entities          perl-HTML-Parser
            perl-HTML-Tagset        perl-HTML-TokeParser        perl-Mail-Field
            perl-Mail-Header        perl-Mail-IMAPClient        perl-Mail-Internet
            perl-Math-BigInt        perl-Math-BigRat            perl-MIME-Base64
            perl-MIME-Decoder       perl-MIME-Decoder-UU        perl-MIME-Head
            perl-MIME-Parser        perl-MIME-QuotedPrint       perl-MIME-Tools
            perl-MIME-WordDecoder   perl-Net-CIDR               perl-Net-DNS
            perl-Net-IP             perl-OLE-Storage_Lite       perl-Pod-Escapes
            perl-Pod-Simple         perl-POSIX                  perl-Scalar-Util
            perl-Socket             perl-Storable               perl-Test-Harness
            perl-Test-Pod           perl-Test-Simple            perl-Time-HiRes
            perl-Time-localtime     perl-Sys-Hostname-Long      perl-Sys-SigAction
            perl-Sys-Syslog         perl-Env                    perl-File-ShareDir-Install
            perl-Data-Dump          perl-DB_File                perl-Getopt-Long-Descriptive
            perl-Mail-DKIM          perl-Digest                 perl-Encode-Detect
            perl-Error              perl-ExtUtils-CBuilder      perl-ExtUtils-ParseXS
            perl-Getopt-Long        perl-Inline                 perl-IO-String
            perl-IO-Zlib            perl-IP-Country             perl-Mail-SPF
            perl-Mail-SPF-Query     perl-Module-Build           perl-Net-CIDR-Lite
            perl-Net-DNS            perl-Net-LDAP               perl-Net-DNS-Resolver-Programmable
            perl-NetAddr-IP         perl-Parse-RecDescent       perl-Test-Harness
            perl-Test-Manifest      perl-Text-Balanced          perl-URI
            perl-version            perl-IO-Compress-Bzip2      perl-Sendmail-PMilter
            perl-Math-Int64         perl-IP-Country-DB_File     perl-namespace-autoclean
            perl-Data-IEEE754       perl-Data-Printer           perl-Data-Validate-IP
            perl-List-AllUtils      perl-List-SomeUtils         perl-Net-Works-Network
            perl-List-UtilsBy       perl-MaxMind-DB-Metadata    perl-MaxMind-DB-Reader
            perl-Module-Runtime     perl-Moo                    perl-MooX-StrictConstructor
            perl-Role-Tiny          perl-strictures             perl-MaxMind-DB-Reader-XS
            perl-Sub-Quote          perl-Math-Int128            perl-HTTP-Date
            perl-MailTools          perl-Net-CIDR-Set           perl-TimeDate
            perl-Test-Fatal         perl-Test-Number-Delta      perl-Data-Dumper-Concise
            perl-DateTime           perl-Test-Warnings          perl-autodie
            perl-Test-Requires      perl-Test-Tester            perl-Clone-PP
            perl-File-HomeDir       perl-Sort-Naturally         perl-JSON-MaybeXS
            perl-Test-LeakTrace     perl-Throwable              perl-Email-Address-XS
            perl-Net-LibIDN         perl-Net-LibIDN2            perl-Test-Perl-Critic
            perl-IO-Socket-INET6    perl-Devel-Hide             perl-Algorithm-Diff
            perl-Alien-Build        perl-Alien-Libxml2          perl-Alien-Build-Plugin-Download-GitLab
            perl-Authen-SASL        perl-B-COW                  perl-B-Keywords
            perl-BSD-Resource       perl-Capture-Tiny           perl-Class-Tiny
            perl-Clone              perl-Config-Tiny            perl-DBIx-Simple
            perl-Devel-Cycle        perl-Email-Abstract         perl-Email-Address-XS
            perl-Email-Date-Format  perl-Email-MIME             perl-Email-MIME-ContentType
            perl-Email-MessageID    perl-Email-Sender           perl-Email-MIME-Encodings
            perl-Email-Simple       perl-Encode                 perl-Encode-Locale
            perl-ExtUtils-Config    perl-ExtUtils-Helpers       perl-ExtUtils-InstallPaths
            perl-FFI-CheckLib       perl-File-Listing           perl-File-Slurper
            perl-File-chdir         perl-Path-Class             perl-Geo-IP
            perl-HTTP-Cookies       perl-HTTP-Daemon            perl-HTTP-Message
            perl-HTTP-Negotiate     perl-Hook-LexWrap           perl-IO-Compress-Brotli
            perl-IO-HTML            perl-IO-Socket-SSL          perl-Importer
            perl-LWP-MediaTypes     perl-Lingua-EN-Inflect      perl-MIME-Charset
            perl-MIME-Types         perl-Mail-DMARC             perl-Module-Build-Tiny
            perl-Module-Pluggable   perl-MooX-Types-MooseLike   perl-Mozilla-CA
            perl-Net-HTTP           perl-Net-IDN-Encode         perl-Net-IMAP-Simple
            perl-Net-Patricia       perl-Net-SMTPS              perl-Net-SSLeay
            perl-PPI                perl-PPIx-QuoteLike         perl-PPIx-Regexp
            perl-PPIx-Utilities     perl-Perl-Critic            perl-Perl-Critic-Policy-Perlsecret
            perl-Perl-Tidy          perl-PerlIO-utf8_strict     perl-Pod-Spell
            perl-Readonly           perl-Readonly-XS            perl-Regexp-Common
            perl-Scope-Guard        perl-Socket6                perl-String-Format
            perl-Sub-Info           perl-Task-Weaken            perl-Term-Size-Any
            perl-Term-Size-Perl     perl-Term-Table             perl-Test-Exception
            perl-Test-FailWarnings  perl-Test-File-ShareDir     perl-Test-Needs
            perl-Test-NoWarnings    perl-Test-Object            perl-Test-Output
            perl-Test-Regexp        perl-Test-RequiresInternet  perl-Test-Simple
            perl-Test-SubCalls      perl-Test2-Suite            perl-Text-Diff
            perl-Text-Unidecode     perl-Time-Local             perl-Unicode-LineBreak
            perl-WWW-RobotRules     perl-XML-LibXML             perl-XML-NamespaceSupport
            perl-XML-SAX            perl-XML-SAX-Base           perl-libwww-perl
"

# the array of perl modules needed
ARMOD=();

ARMOD+=('Archive::Tar');            ARMOD+=('Archive::Zip');            ARMOD+=('bignum');
ARMOD+=('Carp');                    ARMOD+=('Compress::Zlib');          ARMOD+=('Compress::Raw::Zlib');
ARMOD+=('Convert::BinHex');         ARMOD+=('Convert::TNEF');           ARMOD+=('Data::Dumper');
ARMOD+=('Date::Parse');             ARMOD+=('DBD::SQLite');             ARMOD+=('Digest::SHA1');
ARMOD+=('Digest::HMAC');            ARMOD+=('Digest::MD5');             ARMOD+=('DBI');
ARMOD+=('DirHandle');               ARMOD+=('ExtUtils::MakeMaker');     ARMOD+=('Fcntl');
ARMOD+=('File::Basename');          ARMOD+=('File::Copy');              ARMOD+=('File::Path');
ARMOD+=('File::Spec');              ARMOD+=('File::Temp');              ARMOD+=('FileHandle');
ARMOD+=('Filesys::Df');             ARMOD+=('Getopt::Long');            ARMOD+=('Inline::C');
ARMOD+=('IO');                      ARMOD+=('IO::File');                ARMOD+=('IO::Pipe');
ARMOD+=('IO::Stringy');             ARMOD+=('HTML::Entities');          ARMOD+=('HTML::Parser');
ARMOD+=('HTML::Tagset');            ARMOD+=('HTML::TokeParser');        ARMOD+=('Mail::Field');
ARMOD+=('Mail::Header');            ARMOD+=('Mail::IMAPClient');        ARMOD+=('Mail::Internet');
ARMOD+=('Math::BigInt');            ARMOD+=('Math::BigRat');            ARMOD+=('MIME::Base64');
ARMOD+=('MIME::Decoder');           ARMOD+=('MIME::Decoder::UU');       ARMOD+=('MIME::Head');
ARMOD+=('MIME::Parser');            ARMOD+=('MIME::QuotedPrint');       ARMOD+=('MIME::Tools');
ARMOD+=('MIME::WordDecoder');       ARMOD+=('Net::CIDR');               ARMOD+=('Net::DNS');
ARMOD+=('Net::IP');                 ARMOD+=('OLE::Storage_Lite');       ARMOD+=('Pod::Escapes');
ARMOD+=('Pod::Simple');             ARMOD+=('POSIX');                   ARMOD+=('Scalar::Util');
ARMOD+=('Socket');                  ARMOD+=('Storable');                ARMOD+=('Test::Harness');
ARMOD+=('Test::Pod');               ARMOD+=('Test::Simple');            ARMOD+=('Time::HiRes');
ARMOD+=('Time::localtime');         ARMOD+=('Sys::Hostname::Long');     ARMOD+=('Sys::SigAction');
ARMOD+=('Sys::Syslog');             ARMOD+=('Env');                     ARMOD+=('File::ShareDir::Install');
ARMOD+=('Data::Dump');              ARMOD+=('DB_File');                 ARMOD+=('Getopt::Long::Descriptive');
ARMOD+=('Mail::DKIM');              ARMOD+=('Digest');                  ARMOD+=('Encode::Detect');
ARMOD+=('Error');                   ARMOD+=('ExtUtils::CBuilder');      ARMOD+=('ExtUtils::ParseXS');
ARMOD+=('Getopt::Long');            ARMOD+=('Inline');                  ARMOD+=('IO::String');
ARMOD+=('IO::Zlib');                ARMOD+=('IP::Country');             ARMOD+=('Mail::SPF');
ARMOD+=('Mail::SPF::Query');        ARMOD+=('Module::Build');           ARMOD+=('Net::CIDR::Lite');
ARMOD+=('Net::DNS');                ARMOD+=('Net::LDAP');               ARMOD+=('Net::DNS::Resolver::Programmable');
ARMOD+=('NetAddr::IP');             ARMOD+=('Parse::RecDescent');       ARMOD+=('Test::Harness');
ARMOD+=('Test::Manifest');          ARMOD+=('Text::Balanced');          ARMOD+=('URI');
ARMOD+=('version');                 ARMOD+=('IO::Compress::Bzip2');     ARMOD+=('Sendmail::PMilter');
ARMOD+=('Math::Int64');             ARMOD+=('IP::Country::DB_File');    ARMOD+=('namespace::autoclean');
ARMOD+=('Data::IEEE754');           ARMOD+=('Data::Printer');           ARMOD+=('Data::Validate::IP');
ARMOD+=('List::AllUtils');          ARMOD+=('List::SomeUtils');         ARMOD+=('Net::Works::Network');
ARMOD+=('List::UtilsBy');           ARMOD+=('MaxMind::DB::Metadata');   ARMOD+=('MaxMind::DB::Reader');
ARMOD+=('Module::Runtime');         ARMOD+=('Moo');                     ARMOD+=('MooX::StrictConstructor');
ARMOD+=('Role::Tiny');              ARMOD+=('strictures');              ARMOD+=('MaxMind::DB::Reader::XS');
ARMOD+=('Sub::Quote');              ARMOD+=('Math::Int128');            ARMOD+=('HTTP::Date');
ARMOD+=('MailTools');               ARMOD+=('Net::CIDR::Set');          ARMOD+=('TimeDate');
ARMOD+=('Test::Fatal');             ARMOD+=('Test::Number::Delta');     ARMOD+=('Data::Dumper::Concise');
ARMOD+=('DateTime');                ARMOD+=('Test::Warnings');          ARMOD+=('autodie');
ARMOD+=('Test::Requires');          ARMOD+=('Test::Tester');            ARMOD+=('Clone::PP');
ARMOD+=('File::HomeDir');           ARMOD+=('Sort::Naturally');         ARMOD+=('JSON::MaybeXS');
ARMOD+=('Test::LeakTrace');         ARMOD+=('Throwable');               ARMOD+=('Email::Address::XS');
ARMOD+=('Net::LibIDN');             ARMOD+=('Net::LibIDN2');            ARMOD+=('Test::Perl::Critic');
ARMOD+=('IO::Socket::INET6');       ARMOD+=('Devel::Hide');             ARMOD+=('Algorithm::Diff');
ARMOD+=('Alien::Build');            ARMOD+=('Alien::Libxml2');          ARMOD+=('Alien::Build::Plugin::Download::GitLab');
ARMOD+=('Authen::SASL');            ARMOD+=('B::COW');                  ARMOD+=('B::Keywords');
ARMOD+=('BSD::Resource');           ARMOD+=('Capture::Tiny');           ARMOD+=('Class::Tiny');
ARMOD+=('Clone');                   ARMOD+=('Config::Tiny');            ARMOD+=('DBIx::Simple');
ARMOD+=('Devel::Cycle');            ARMOD+=('Email::Abstract');         ARMOD+=('Email::Address::XS');
ARMOD+=('Email::Date::Format');     ARMOD+=('Email::MIME');             ARMOD+=('Email::MIME::ContentType');
ARMOD+=('Email::MessageID');        ARMOD+=('Email::Sender');           ARMOD+=('Email::MIME::Encodings');
ARMOD+=('Email::Simple');           ARMOD+=('Encode');                  ARMOD+=('Encode::Locale');
ARMOD+=('ExtUtils::Config');        ARMOD+=('ExtUtils::Helpers');       ARMOD+=('ExtUtils::InstallPaths');
ARMOD+=('FFI::CheckLib');           ARMOD+=('File::Listing');           ARMOD+=('File::Slurper');
ARMOD+=('File::chdir');             ARMOD+=('Path::Class');             ARMOD+=('Geo::IP');
ARMOD+=('HTTP::Cookies');           ARMOD+=('HTTP::Daemon');            ARMOD+=('HTTP::Message');
ARMOD+=('HTTP::Negotiate');         ARMOD+=('Hook::LexWrap');           ARMOD+=('IO::Compress::Brotli');
ARMOD+=('IO::HTML');                ARMOD+=('IO::Socket::SSL');         ARMOD+=('Importer');
ARMOD+=('LWP::MediaTypes');         ARMOD+=('Lingua::EN::Inflect');     ARMOD+=('MIME::Charset');
ARMOD+=('MIME::Types');             ARMOD+=('Mail::DMARC');             ARMOD+=('Module::Build::Tiny');
ARMOD+=('Module::Pluggable');       ARMOD+=('MooX::Types::MooseLike');  ARMOD+=('Mozilla::CA');
ARMOD+=('Net::HTTP');               ARMOD+=('Net::IDN::Encode');        ARMOD+=('Net::IMAP::Simple');
ARMOD+=('Net::Patricia');           ARMOD+=('Net::SMTPS');              ARMOD+=('Net::SSLeay');
ARMOD+=('PPI');                     ARMOD+=('PPIx::QuoteLike');         ARMOD+=('PPIx::Regexp');
ARMOD+=('PPIx::Utilities');         ARMOD+=('Perl::Critic');            ARMOD+=('Perl::Critic::Policy::Perlsecret');
ARMOD+=('Perl::Tidy');              ARMOD+=('PerlIO::utf8_strict');     ARMOD+=('Pod::Spell');
ARMOD+=('Readonly');                ARMOD+=('Readonly::XS');            ARMOD+=('Regexp::Common');
ARMOD+=('Scope::Guard');            ARMOD+=('Socket6');                 ARMOD+=('String::Format');
ARMOD+=('Sub::Info');               ARMOD+=('Task::Weaken');            ARMOD+=('Term::Size::Any');
ARMOD+=('Term::Size::Perl');        ARMOD+=('Term::Table');             ARMOD+=('Test::Exception');
ARMOD+=('Test::FailWarnings');      ARMOD+=('Test::File::ShareDir');    ARMOD+=('Test::Needs');
ARMOD+=('Test::NoWarnings');        ARMOD+=('Test::Object');            ARMOD+=('Test::Output');
ARMOD+=('Test::Regexp');            ARMOD+=('Test::RequiresInternet');  ARMOD+=('Test::Simple');
ARMOD+=('Test::SubCalls');          ARMOD+=('Test2::Suite');            ARMOD+=('Text::Diff');
ARMOD+=('Text::Unidecode');         ARMOD+=('Time::Local');             ARMOD+=('Unicode::LineBreak');
ARMOD+=('WWW::RobotRules');         ARMOD+=('XML::LibXML');             ARMOD+=('XML::NamespaceSupport');
ARMOD+=('XML::SAX');                ARMOD+=('XML::SAX::Base');          ARMOD+=('LWP::UserAgent')


# additional spamassassin plugins
SAMOD=();
SAMOD+=('Mail::SpamAssassin');
SAMOD+=('Mail::SpamAssassin::Plugin::Rule2XSBody');
SAMOD+=('Mail::SpamAssassin::Plugin::DCC');
SAMOD+=('Mail::SpamAssassin::Plugin::Pyzor');

# logging starts here
(
clear
echo;
echo "Installation/configuration results are being logged to /var/log/mailscanner-configuration.log";
echo;
timewait 1

# install the basics
echo "Installing required base system utilities.";
echo;
timewait 2

# install base packages
$ZYPPER --non-interactive --ignore-unknown install $BASEPACKAGES

# install this separate in case it conflicts
if [[ "x$MTAOPTION" != "x" && "x$MTAOPTION" != 'xnone' ]]; then
    $ZYPPER --non-interactive --ignore-unknown install $MTAOPTION
    if [ $? != 0 ]; then
        echo "Error installing $MTAOPTION MTA"
        echo "This usually means an MTA is already installed."
    fi
    if [ $MTAOPTION == "sendmail" ]; then
        mkdir -p /var/spool/mqueue
        mkdir -p /var/spool/mqueue.in
    fi
fi

# make sure rpm is available
if [ -x /bin/rpm ]; then
    RPM=/bin/rpm
elif [ -x /usr/bin/rpm ]; then
    RPM=/usr/bin/rpm
else
    clear
    echo;
    echo "The 'rpm' command cannot be found. I have already attempted to install this";
    echo "package, but it is still not found. Please ensure that you have network";
    echo "access to the internet and try running the installation again.";
    echo;
    exit 1
fi

# check for curl
if [ ! -x /usr/bin/curl ]; then
    clear
    echo;
    echo "The curl command cannot be found. I have already attempted to install this";
    echo "package, but it is still not found. Please ensure that you have network access";
    echo "to the internet and try running the installation again.";
    echo;
    exit 1
else
    CURL='/usr/bin/curl';
fi

# create the cpan config if there isn't one and the user
# elected to use CPAN
if [ $CPANOPTION -eq 1 ]; then
    # user elected to use CPAN option
    if [ ! -f '/root/.cpan/CPAN/MyConfig.pm' ]; then
        echo;
        echo "CPAN config missing. Creating one ..."; echo;
        mkdir -p /root/.cpan/CPAN
        cd /root/.cpan/CPAN
        $CURL -LO https://mirrors.efa-project.org/msv5/CPAN/SUSE/root/MyConfig.pm
        cd "$THISCURRPMDIR"
        timewait 1
    fi
    AUTOCPAN=1
    # Install cpanminus
    $ZYPPER  --non-interactive install perl-App-cpanminus
    if [ $? -ne 0 ]; then
        echo "Error installing cpanminus, falling back to perl invocation method."
        AUTOCPAN=0
    fi
fi

# install required perl packages that are available via zypper along
#
# some items may not be available depending on the distribution 
# release but those items will be checked after this and installed
# via cpan if the user elected to do so.
clear
echo;
echo "Installing available Perl packages, ClamAV (if elected)"
echo "via zypper. You can safely ignore any";
echo "subsequent warnings from zypper."; echo;
timewait 3

$ZYPPER --non-interactive --ignore-unknown install $MOREPACKAGES $CAVOPTION

# now check for missing perl modules and install them via cpan
# if the user elected to do so
clear; echo;
echo "Checking Perl Modules ... "; echo;
timewait 2
# used to trigger a wait if something this missing
PMODWAIT=0

for i in "${ARMOD[@]}"
do
    perldoc -l $i >/dev/null 2>&1
    if [ $? -ne 0 ]; then
        if [ $CPANOPTION -eq 1 ]; then
            clear
            echo "$i is missing. Installing via CPAN ..."; echo;
            timewait 1
            if [ $AUTOCPAN -eq 0 ]; then
                perl -MCPAN -e "CPAN::Shell->force(qw(install $i ));"
            else
                cpanm --force --no-interactive $i
            fi
        else
            echo "WARNING: $i is missing. You should fix this.";
            PMODWAIT=5
        fi
    else
        echo "$i => OK";
    fi
done

function install_sa() {
    # Create sabuild user and set up for sudo build (SA 4.0+)
    groupadd sabuild
    useradd -m -s /sbin/nologin -g sabuild sabuild &>/dev/null
    id -u sabuild &>/dev/null
    if [ $? -eq 0 ]; then
        echo "sabuild    ALL=(ALL)    NOPASSWD: ALL" > /etc/sudoers.d/sabuild
        if [ ! -f '/home/sabuild/.cpan/CPAN/MyConfig.pm' ]; then
            echo;
            echo "CPAN config missing. Creating one ..."; echo;
            mkdir -p /home/sabuild/.cpan/CPAN
            cd /home/sabuild/.cpan/CPAN
            $CURL -LO https://mirrors.efa-project.org/msv5/CPAN/SUSE/sabuild/MyConfig.pm
            chown -R sabuild:sabuild /home/sabuild/.cpan
            cd "$THISCURRPMDIR"
        fi

        for i in "${SAMOD[@]}"
        do
            perldoc -l $i >/dev/null 2>&1
            if [[ $? -ne 0 || $1 == "update" ]]; then
                if [ $CPANOPTION -eq 1 ]; then
                    clear
                    echo "$i is missing or needs updated. Installing via CPAN ..."; echo;
                    timewait 1
                    su - sabuild -s /bin/bash -c "echo \"\\\n\" | perl -MCPAN -e \"CPAN::Shell->force(qw(install $i ));\""
                else
                    echo "WARNING: $i is missing. You should fix this.";
                    PMODWAIT=5
                fi
            else
                echo "$i => OK";
            fi
        done

        # Cleanup, just revoke sudo privs
        rm -f /etc/sudoers.d/sabuild
    else
        echo "Unable to create sabuild user, cannot install spamassassin"
        echo "You should fix this."
    fi
}

install_sa

# Update perl modules
if [[ -n "${arg_update+x}" && $AUTOCPAN -ne 0 ]]; then
    cpanm App::cpanoutdated
    for i in $(cpan-outdated -p); do
      if [ "$i" == "Mail::SpamAssassin" ]; then
        # Check for spamassassin rpm and notify user
        if [[ -n $($RPM -qa | grep spamassassin) ]]; then
          echo "Spamassassin detected installed via rpm.  To update spamassassin use your package manager."
          timewait 1
        else
          install_sa "update"
        fi
      else
        cpanm --force --no-interactive $i
      fi
    done
fi

# will pause if a perl module was missing
timewait $PMODWAIT

# go to where i started
cd "$THISCURRPMDIR"

# Freshclam
if [ $CAV -eq 1 ]; then
    COUT='#Example';
    perl -pi -e 's/Example/'$COUT'/;' /etc/freshclam.conf
    systemctl enable clamd.service
    freshclam 2>/dev/null
fi

clear
echo;
echo "Preparing MailScanner ... ";

# set the correct sock for suse systems
CAVOLD='^Clamd Socket.*';
CAVNEW='Clamd Socket = \/var\/run\/clamav\/clamd-socket';
if [ -f '/etc/MailScanner/MailScanner.conf' ]; then
    sed -i "s/${CAVOLD}/${CAVNEW}/g" /etc/MailScanner/MailScanner.conf
fi

# set the correct lock file for suse systems
CAVOLD='^Clamd Lock File.*';
CAVNEW='Clamd Lock File = \/var\/run\/clamav\/clamd\.pid';
if [ -f '/etc/MailScanner/MailScanner.conf' ]; then
    sed -i "s/${CAVOLD}/${CAVNEW}/g" /etc/MailScanner/MailScanner.conf
fi

# allow supplementary groups
CAVOLD='^#AllowSupplementaryGroups.*';
CAVNEW='AllowSupplementaryGroups yes';
if [ -f '/etc/clamd.conf' ]; then
    sed -i "s/${CAVOLD}/${CAVNEW}/g" /etc/clamd.conf
fi

# check for common users and add to the mtagroup
if id -u clam >/dev/null 2>&1; then
    usermod -a -G mtagroup clam >/dev/null 2>&1
fi

if id -u clamav >/dev/null 2>&1; then
    usermod -a -G mtagroup clamav >/dev/null 2>&1
fi

if id -u clamscan >/dev/null 2>&1; then
    usermod -a -G mtagroup clamscan >/dev/null 2>&1
fi

if id -u vscan >/dev/null 2>&1; then
    usermod -a -G mtagroup vscan >/dev/null 2>&1
fi

if id -u sophosav >/dev/null 2>&1; then
    usermod -a -G mtagroup sophosav >/dev/null 2>&1
fi

if id -u postfix >/dev/null 2>&1; then
    usermod -a -G mtagroup postfix >/dev/null 2>&1
    chown postfix /var/spool/MailScanner/milterin >/dev/null 2>&1
    chown postfix /var/spool/MailScanner/milterout >/dev/null 2>&1
fi

if id -u mail >/dev/null 2>&1; then
    usermod -a -G mtagroup mail >/dev/null 2>&1
fi

if id -u avast >/dev/null 2>&1; then
    usermod -a -G mtagroup avast >/dev/null 2>&1
fi

# create symlink for spamasassin
if [ -d '/etc/mail/spamassassin' -a ! -L '/etc/mail/spamassassin/MailScanner.cf' -a -f '/etc/MailScanner/spamassassin.conf' -a ! -f '/etc/mail/spamassassin/MailScanner.cf' ]; then
    ln -s /etc/MailScanner/spamassassin.conf /etc/mail/spamassassin/MailScanner.cf 
fi

# fix the clamav wrapper if the user does not exist
if [ -d '/etc/clamav' ]; then

    DISTROCAVUSER='ClamUser="clamav"';
    DISTROCAVGRP='ClamGroup="clamav"';
    
    # check for common users and add to the mtagroup
    if id -u clam >/dev/null 2>&1; then
        CAVUSR='ClamUser="clam"';
    fi

    if id -u clamav >/dev/null 2>&1; then
        CAVUSR='ClamUser="clamav"';
    fi
    
    if id -u clamscan >/dev/null 2>&1; then
        CAVUSR='ClamUser="clamscan"';
    fi
    
    if id -u vscan >/dev/null 2>&1; then
        CAVUSR='ClamUser="vscan"';
    fi

    if getent group clamav >/dev/null 2>&1; then
        CAVGRP='ClamGroup="clamav"';
    fi

    if getent group clam >/dev/null 2>&1; then
        CAVGRP='ClamGroup="clam"';
    fi
    
    if getent group clamscan >/dev/null 2>&1; then
        CAVGRP='ClamGroup="clamscan"';
    fi
    
    if [ -f '/usr/lib/MailScanner/wrapper/clamav-wrapper' ]; then
        sed -i "s/${DISTROCAVUSER}/${CAVUSR}/g" /usr/lib/MailScanner/wrapper/clamav-wrapper
        sed -i "s/${DISTROCAVGRP}/${CAVGRP}/g" /usr/lib/MailScanner/wrapper/clamav-wrapper
    fi
    
    # fix old style clamav Monitors if preset in old mailscanner.conf
    CAVOLD='^Monitors for ClamAV Updates.*';
    CAVNEW='Monitors for ClamAV Updates = \/usr\/local\/share\/clamav\/\*\.cld \/usr\/local\/share\/clamav\/\*\.cvd \/var\/lib\/clamav\/\*\.inc\/\* \/var\/lib\/clamav\/\*\.\?db \/var\/lib\/clamav\/\*\.cvd';
    if [ -f '/etc/MailScanner/MailScanner.conf' ]; then
        sed -i "s/${CAVOLD}/${CAVNEW}/g" /etc/MailScanner/MailScanner.conf
    fi

fi

# create ramdisk
if [ $RAMDISK -eq 1 ]; then
	if [ -d '/var/spool/MailScanner/incoming' ]; then
		echo "Creating the ramdisk ...";
		echo;
		DISK="/var/spool/MailScanner/incoming";
		FSTYPE=$(df -P -T ${DISK}|tail -n +2 | awk '{print $2}')

		if [ $FSTYPE != tmpfs ]; then
			mount -t tmpfs -o size=${RAMDISKSIZE}M tmpfs ${DISK}
			echo "tmpfs ${DISK} tmpfs rw,size=${RAMDISKSIZE}M 0 0" >> /etc/fstab
			echo "Enabling ramdisk sync ...";
			if [ -f '/etc/MailScanner/defaults' ]; then
				OLD="^ramdisk_sync=0";
				NEW="ramdisk_sync=1";
				sed -i "s/${OLD}/${NEW}/g" /etc/MailScanner/defaults
			fi
		else
			echo "${DISK} is already a RAMDISK!"; echo;
		fi
	fi
fi

/usr/sbin/ms-update-phishing > /dev/null 2>&1

# fix the clamav wrapper if the user does not exist
if [ -f '/etc/freshclam.conf' ]; then
	if id -u vscan >/dev/null 2>&1; then
		#vscan is being used instead of clamav
		OLDCAVUSR='ClamUser="clamav"';
		NEWCAVUSR='ClamUser="vscan"'

		if [ -f '/usr/lib/MailScanner/wrapper/clamav-wrapper' ]; then
			perl -pi -e 's/'$OLDCAVUSR'/'$NEWCAVUSR'/;' /usr/lib/MailScanner/wrapper/clamav-wrapper
		fi

		mkdir -p /var/run/clamav
		chown vscan:vscan /var/run/clamav
	fi
fi

ldconfig

if [[ -n "${arg_update+x}" ]]; then
	echo;
	echo '----------------------------------------------------------';
	echo 'Configuration and module update complete';
	echo;
	echo 'See http://www.mailscanner.info for more information and  '
	echo 'support via the MailScanner mailing list.'
	echo;
	echo;
	echo To finish updating MailScanner, review the following files:
	echo
	echo /etc/MailScanner/defaults
	echo /etc/MailScanner/MailScanner.conf
	echo
	echo Restart MailScanner
	echo
	echo    --SysV Init--
	echo    service mailscanner restart
	echo
	echo    --Systemd--
	echo    systemctl restart mailscanner.service
	echo
	echo Restart MSMilter \(if in use\) 
	echo
	echo    --SysV Init--
	echo    service msmilter restart
	echo
	echo    --Systemd--
	echo    systemctl restart msmilter.service
	echo
else
	echo;
	echo '----------------------------------------------------------';
	echo 'Initial configuration and module installation complete';
	echo;
	echo 'See http://www.mailscanner.info for more information and  '
	echo 'support via the MailScanner mailing list.'
	echo;
	echo;
	echo To finish configuring MailScanner, edit the following files:
	echo
	echo /etc/MailScanner/defaults
	echo /etc/MailScanner/MailScanner.conf
	echo
	echo
	echo To activate MailScanner run the following commands:
	echo
	echo    --SysV Init--
	echo    chkconfig mailscanner on
	echo    service mailscanner start
	echo
	echo    --Systemd--
	echo    systemctl enable mailscanner.service
	echo    systemctl start mailscanner.service
	echo
	echo To activate MSMilter \(if in use\) run the following commands:
	echo
	echo    --SysV Init--
	echo    chkconfig msmilter on
	echo    service msmilter start
	echo
	echo    --Systemd--
	echo    systemctl enable msmilter.service
	echo    systemctl start msmilter.service
	echo
fi 

) 2>&1 | tee -a /var/log/mailscanner-configuration.log
